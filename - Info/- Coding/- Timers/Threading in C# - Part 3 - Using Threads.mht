From: =?windows-1251?B?0e718ODt5e3uIFdpbmRvd3MgSW50ZXJuZXQgRXhwbG9yZXIgOA==?=
Subject: Threading in C# - Part 3 - Using Threads
Date: Thu, 7 Apr 2011 21:56:45 +0300
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01CBF56E.AFFD6CA0"
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7601.17514

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01CBF56E.AFFD6CA0
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.albahari.com/threading/part3.aspx

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML lang=3Den =
xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD><TITLE>Threading in C# - =
Part 3 - Using Threads</TITLE>
<META content=3D"text/html; charset=3Dutf-8" =
http-equiv=3DContent-Type><LINK=20
rel=3Dstylesheet type=3Dtext/css=20
href=3D"http://www.albahari.com/threading/tstyles.css"><LINK =
rel=3Dstylesheet=20
type=3Dtext/css href=3D"http://www.albahari.com/threading/print.css" =
media=3Dprint>
<SCRIPT type=3Dtext/javascript=20
src=3D"http://www.albahari.com/threading/sh_main.min.js"></SCRIPT>

<SCRIPT type=3Dtext/javascript=20
src=3D"http://www.albahari.com/threading/sh_csharp.js"></SCRIPT>
<LINK rel=3Dstylesheet type=3Dtext/css=20
href=3D"http://www.albahari.com/threading/sh_style.css">
<META name=3DGENERATOR content=3D"MSHTML 8.00.7601.17537"></HEAD>
<BODY onload=3Dsh_highlightDocument();>
<FORM id=3DaspnetForm method=3Dpost name=3DaspnetForm =
action=3Dpart3.aspx>
<DIV><INPUT id=3D__VIEWSTATE=20
value=3D/wEPDwULLTEwMDUyNjYzMjhkZLODIpdAnKjtwAwYz4wgFNQJ9RWU =
type=3Dhidden=20
name=3D__VIEWSTATE> </DIV>
<DIV id=3Dnavbar>
<P class=3Dnavtitle>Threading in C#, by Joe Albahari</P>
<DIV id=3Dctl00_navcontent>
<P class=3Dnavsectioncontainer><A class=3Dnav0=20
href=3D"http://www.albahari.com/threading/">GETTING STARTED</A> <A =
class=3Dnav1=20
href=3D"http://www.albahari.com/threading/#_Introduction">+ Introduction =
and=20
Concepts</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/#_Creating_and_Starting_Threads=
">+=20
Creating and Starting Threads</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/#_Thread_Pooling">+ Thread =
Pooling</A>=20
</P>
<P class=3Dnavsectioncontainer><A class=3Dnav0=20
href=3D"http://www.albahari.com/threading/part2.aspx">BASIC =
SYNCHRONIZATION</A> <A=20
class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part2.aspx#_Synchronization">+ =

Synchronization Essentials</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part2.aspx#_Locking">+ =
Locking</A> <A=20
class=3Dnav1 =
href=3D"http://www.albahari.com/threading/part2.aspx#_Thread_Safety">+=20
Thread Safety</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part2.aspx#_Signaling_with_Even=
t_Wait_Handles">+=20
Event Wait Handles</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part2.aspx#_Synchronization_Con=
texts">+=20
Synchronization Contexts</A> </P>
<P class=3Dnavsectioncontainer><A class=3Dnav0a=20
href=3D"http://www.albahari.com/threading/part3.aspx">USING THREADS</A> =
<A=20
class=3Dnav1a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Event-Based_Asynchr=
onous_Pattern">Event-Based=20
Asynch Pattern</A> <A class=3Dnav1a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_BackgroundWorker">B=
ackgroundWorker</A>=20
<A class=3Dnav2a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Using_BackgroundWor=
ker">Using=20
BackgroundWorker</A> <A class=3Dnav2a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Subclassing_Backgro=
undWorker">Subclassing=20
BackgroundWorker</A> <A class=3Dnav1a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Interrupt_and_Abort=
">Interrupt=20
and Abort</A> <A class=3Dnav2a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Interrupt">Interrup=
t</A> <A=20
class=3Dnav2a =
href=3D"http://www.albahari.com/threading/part3.aspx#_Abort">Abort</A>=20
<A class=3Dnav1a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Safe_Cancellation">=
Safe=20
Cancellation</A> <A class=3Dnav2a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Cancellation_Tokens=
">Cancellation=20
Tokens</A> <A class=3Dnav1a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Lazy_Initialization=
">Lazy=20
Initialization</A> <A class=3Dnav2a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_LazyT">Lazy of T =
class</A>=20
<A class=3Dnav2a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_LazyInitializer">La=
zyInitializer</A>=20
<A class=3Dnav1a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Thread-Local_Storag=
e">Thread-Local=20
Storage</A> <A class=3Dnav2a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_ThreadStatic">[Thre=
adStatic]</A>=20
<A class=3Dnav2a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_ThreadLocalT">Threa=
dLocal of=20
T class</A> <A class=3Dnav2a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_GetData_and_SetData=
">GetData=20
and SetData</A> <A class=3Dnav1a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Timers">Timers</A> =
<A=20
class=3Dnav2a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Multithreaded_Timer=
s">Multithreaded=20
Timers</A> <A class=3Dnav2a=20
href=3D"http://www.albahari.com/threading/part3.aspx#_SingleThreaded_Time=
rs">Single-Threaded=20
Timers</A> </P>
<P class=3Dnavsectioncontainer><A class=3Dnav0=20
href=3D"http://www.albahari.com/threading/part4.aspx">ADVANCED =
THREADING</A> <A=20
class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part4.aspx#_Nonblocking_Synchro=
nization">+=20
Nonblocking Synchronization</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part4.aspx#_Signaling_with_Wait=
_and_Pulse">+=20
Signaling with Wait and Pulse</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part4.aspx#_The_Barrier_Class">=
+ The=20
Barrier Class</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part4.aspx#_Reader_Writer_Locks=
">+=20
Reader/Writer Locks</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part4.aspx#_Suspend_and_Resume"=
>+=20
Suspend and Resume</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part4.aspx#_Aborting_Threads">+=
 Aborting=20
Threads</A> </P>
<P class=3Dnavsectioncontainer><A class=3Dnav0=20
href=3D"http://www.albahari.com/threading/part5.aspx">PARALLEL =
PROGRAMMING</A> <A=20
class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part5.aspx#_Parallel_Programmin=
g">+=20
Parallel Programming</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part5.aspx#_Why_PFX">+ Why =
PFX?</A> <A=20
class=3Dnav1 =
href=3D"http://www.albahari.com/threading/part5.aspx#_PLINQ">+=20
PLINQ</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part5.aspx#_The_Parallel_Class"=
>+ The=20
Parallel Class</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part5.aspx#_Task_Parallelism">+=
 Task=20
Parallelism</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part5.aspx#_Working_with_Aggreg=
ateException">+=20
Working with AggregateException</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part5.aspx#_Concurrent_Collecti=
ons">+=20
Concurrent Collections</A> <A class=3Dnav1=20
href=3D"http://www.albahari.com/threading/part5.aspx#_SpinLock_and_SpinWa=
it">+=20
SpinLock and SpinWait</A> </P></DIV>
<P><A href=3D"http://www.albahari.com/">More by this =
author</A></P><BR></DIV>
<DIV id=3Dmain>
<P class=3Dtitle>Threading in C#</P>
<P class=3Dauthor>Joseph Albahari</P>
<DIV id=3Dctl00_toc>
<TABLE class=3Dtoc border=3D0 cellSpacing=3D0 cellPadding=3D0>
  <TBODY>
  <TR>
    <TH class=3Dtoc><A class=3Dtoc =
href=3D"http://www.albahari.com/threading/">Part=20
      1</A></TH>
    <TH class=3Dtoc><A class=3Dtoc=20
      href=3D"http://www.albahari.com/threading/part2.aspx">Part =
2</A></TH>
    <TH class=3Dtocactive>Part 3</TH>
    <TH class=3Dtoc><A class=3Dtoc=20
      href=3D"http://www.albahari.com/threading/part4.aspx">Part =
4</A></TH>
    <TH class=3Dtoc><A class=3Dtoc=20
      href=3D"http://www.albahari.com/threading/part5.aspx">Part =
5</A></TH></TR>
  <TR>
    <TD class=3Dtoc><A class=3Dtoc=20
      href=3D"http://www.albahari.com/threading/">Getting =
Started</A></TD>
    <TD class=3Dtoc><A class=3Dtoc=20
      href=3D"http://www.albahari.com/threading/part2.aspx">Basic=20
      Synchronization</A></TD>
    <TD class=3Dtocactive>Using Threads</TD>
    <TD class=3Dtoc><A class=3Dtoc=20
      href=3D"http://www.albahari.com/threading/part4.aspx">Advanced=20
    Threading</A></TD>
    <TD class=3Dtoc><A class=3Dtoc=20
      href=3D"http://www.albahari.com/threading/part5.aspx">Parallel=20
      Programming</A></TD></TR></TBODY></TABLE></DIV>
<P style=3D"FLOAT: right">Last updated: 2010-8-12</P>
<P>Translations: <A=20
href=3D"http://knowledge.swanky.wu.googlepages.com/threading_in_c_sharp.h=
tml">Chinese</A>=20
| <A =
href=3D"http://www.albahari.com/threading/threading_czech.pdf">Czech</A> =
| <A=20
href=3D"http://www.albahari.com/threading/threading_persian.pdf">Persian<=
/A> | <A=20
href=3D"http://rsdn.ru/article/?904">Russian</A></P>
<P><A style=3D"FONT-WEIGHT: bold"=20
href=3D"http://www.albahari.info/threading/threading.pdf">Download =
PDF</A> </P>
<P class=3Dsectiontitle>Part 3: Using Threads</P>
<H1><A name=3D_Event-Based_Asynchronous_Pattern>The Event-Based =
Asynchronous=20
Pattern</A> </H1>
<P>The event-based asynchronous pattern (EAP) provides a simple means by =
which=20
classes can offer multithreading capability without consumers needing to =

explicitly start or manage threads. It also provides the following =
features:</P>
<UL>
  <LI>A cooperative cancellation model</LI>
  <LI>The ability to <A=20
  =
href=3D"http://www.albahari.com/threading/part2.aspx#_Rich_Client_Applica=
tions">safely=20
  update WPF or Windows Forms controls</A> when the worker =
completes</LI>
  <LI>Forwarding of exceptions to the completion event</LI></UL>
<P>The EAP is just a pattern, so these features must be written by the=20
implementer. Just a few classes in the Framework follow this pattern, =
most=20
notably <CODE><A=20
href=3D"http://www.albahari.com/threading/part3.aspx#_BackgroundWorker">B=
ackgroundWorker</A></CODE>=20
(which we=E2=80=99ll cover next), and <CODE>WebClient</CODE> in =
<CODE>System.Net</CODE>.=20
Essentially the pattern is this: a class offers a family of members that =

internally manage multithreading, similar to the following (the =
highlighted=20
sections indicate code that is part of the pattern):</P><PRE =
class=3Dsh_csharp>// These members are from the WebClient class:
=20
public byte[] DownloadData (Uri address);&nbsp;&nbsp;&nbsp; // =
Synchronous version
public void DownloadData<B>Async</B> (Uri address);
public void DownloadData<B>Async</B> (Uri address, <B>object =
userToken</B>);
public event DownloadData<B>CompletedEventHandler</B> =
DownloadData<B>Completed</B>;
=20
public void <B>CancelAsync</B> (<B>object userState</B>);&nbsp; // =
Cancels an operation
public bool <B>IsBusy</B> { get; =
}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Indicates if still running
</PRE>
<P>The <CODE>*Async</CODE> methods execute asynchronously: in other =
words, they=20
start an operation on another thread and then return immediately to the =
caller.=20
When the operation completes, the <SPAN=20
class=3DReplaceable>*</SPAN><CODE>Completed</CODE> event fires =E2=80=94 =
automatically=20
calling <CODE>Invoke</CODE> if <A=20
href=3D"http://www.albahari.com/threading/part2.aspx#_Rich_Client_Applica=
tions">required=20
by a WPF or Windows Forms application</A>. This event passes back an =
event=20
arguments object that contains:</P>
<UL>
  <LI>A flag indicating whether the operation was canceled (by the =
consumer=20
  calling <CODE>CancelAsync</CODE>)</LI>
  <LI>An <CODE>Error</CODE> object indicating an exception that was =
thrown (if=20
  any)</LI>
  <LI>The <CODE>userToken</CODE> object if supplied when calling the=20
  <CODE>Async</CODE> method</LI></UL>
<P>Here=E2=80=99s how we can use <CODE>WebClient</CODE>=E2=80=99s EAP =
members to download a web=20
page:</P><PRE class=3Dsh_csharp>var wc =3D new WebClient();
wc.DownloadStringCompleted +=3D (sender, args) =3D&gt;
{
&nbsp; if (args.Cancelled)
&nbsp;&nbsp;&nbsp; Console.WriteLine ("Canceled");
&nbsp; else if (args.Error !=3D null)
&nbsp;&nbsp;&nbsp; Console.WriteLine ("Exception: " + =
args.Error.Message);
&nbsp; else
&nbsp; {
&nbsp;&nbsp;&nbsp; Console.WriteLine (args.Result.Length + " chars were =
downloaded");
&nbsp;&nbsp;&nbsp; // We could update the UI from here...
&nbsp; }
};
wc.DownloadStringAsync (new Uri ("http://www.linqpad.net"));&nbsp; // =
Start it
</PRE>
<P>A class following the EAP may offer additional groups of asynchronous =

methods. For instance:</P><PRE class=3Dsh_csharp>public string =
DownloadString (Uri address);
public void DownloadStringAsync (Uri address);
public void DownloadStringAsync (Uri address, object userToken);
public event DownloadStringCompletedEventHandler =
DownloadStringCompleted;
</PRE>
<P>However, these will share the same <CODE>CancelAsync</CODE> and=20
<CODE>IsBusy</CODE> members. Therefore, only one asynchronous operation =
can=20
happen at once.</P>
<P class=3Dnote>The EAP offers the <EM>possibility</EM> of economizing =
on threads,=20
if its internal implementation follows the APM (this is described in =
Chapter 23=20
of <A href=3D"http://www.albahari.com/nutshell/">C# 4.0 in a =
Nutshell</A>). </P>
<P>We=E2=80=99ll see in Part 5 how <CODE><A=20
href=3D"http://www.albahari.com/threading/part5.aspx#_Task_Parallelism">T=
asks</A></CODE>=20
offer similar capabilities =E2=80=94 including exception forwarding, =
continuations,=20
cancellation tokens, and support for synchronization contexts. This =
makes=20
<EM>implementing</EM> the EAP less attractive =E2=80=94 except in simple =
cases where=20
<CODE><A=20
href=3D"http://www.albahari.com/threading/part3.aspx#_BackgroundWorker">B=
ackgroundWorker</A></CODE>=20
will do.</P>
<H1><A name=3D_BackgroundWorker>BackgroundWorker</A> </H1>
<DIV class=3Dlinqpad>
<P style=3D"MARGIN: 3pt; COLOR: #a57; FONT-SIZE: 150%; FONT-WEIGHT: =
bold">Write=20
LINQ queries in a fraction of the time</P>
<P><A href=3D"http://www.linqpad.net/"><IMG border=3D0 alt=3DLINQPad=20
src=3D"http://www.albahari.com/threading/linqpadlogo.png" width=3D259=20
height=3D249></A> </P>
<P style=3D"MARGIN: 0px; COLOR: #a57; FONT-SIZE: 270%; FONT-WEIGHT: =
bold"><A=20
style=3D"COLOR: #a57; TEXT-DECORATION: none"=20
href=3D"http://www.linqpad.net/">LINQPad</A></P>
<P style=3D"MARGIN: 0pt; COLOR: teal; FONT-SIZE: 150%; FONT-WEIGHT: =
bold">Small.=20
Fast. FREE</P></DIV>
<P><CODE>BackgroundWorker</CODE> is a helper class in the=20
<CODE>System.ComponentModel</CODE> namespace for managing a worker =
thread. It=20
can be considered a general-purpose implementation of the <A=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Event-Based_Asynchr=
onous_Pattern">EAP</A>,=20
and provides the following features:</P>
<UL>
  <LI>A cooperative cancellation model</LI>
  <LI>The ability to <A=20
  =
href=3D"http://www.albahari.com/threading/part2.aspx#_Rich_Client_Applica=
tions">safely=20
  update WPF or Windows Forms controls</A> when the worker =
completes</LI>
  <LI>Forwarding of exceptions to the completion event</LI>
  <LI>A protocol for reporting progress</LI>
  <LI>An implementation of <CODE>IComponent</CODE> allowing it to be =
sited in=20
  Visual Studio=E2=80=99s designer</LI></UL>
<P><CODE>BackgroundWorker</CODE> uses the <A=20
href=3D"http://www.albahari.com/threading/#_Thread_Pooling">thread =
pool</A>, which=20
means you should never call <CODE><A=20
href=3D"http://www.albahari.com/threading/part4.aspx#_Aborting_Threads">A=
bort</A></CODE>=20
on a <CODE>BackgroundWorker</CODE> thread.</P>
<H2><A name=3D_Using_BackgroundWorker>Using BackgroundWorker</A> </H2>
<P>Here are the minimum steps in using =
<CODE>BackgroundWorker</CODE>:</P>
<OL>
  <LI>Instantiate <CODE>BackgroundWorker</CODE> and handle the=20
  <CODE>DoWork</CODE> event.</LI>
  <LI>Call <CODE>RunWorkerAsync</CODE>, optionally with an =
<CODE>object</CODE>=20
  argument.</LI></OL>
<P>This then sets it in motion. Any argument passed to=20
<CODE>RunWorkerAsync</CODE> will be forwarded to =
<CODE>DoWork</CODE>=E2=80=99s event=20
handler, via the event argument=E2=80=99s <CODE>Argument</CODE> =
property. Here=E2=80=99s an=20
example:</P><PRE class=3Dsh_csharp>class Program
{
&nbsp; static BackgroundWorker _bw =3D new BackgroundWorker();
=20
&nbsp; static void Main()
&nbsp; {
&nbsp;&nbsp;&nbsp; _bw.DoWork +=3D bw_DoWork;
&nbsp;&nbsp;&nbsp; _bw.RunWorkerAsync ("Message to worker");
&nbsp;&nbsp;&nbsp; Console.ReadLine();
&nbsp; }
=20
&nbsp; static void bw_DoWork (object sender, DoWorkEventArgs e)
&nbsp; {
&nbsp;&nbsp;&nbsp; // This is called on the worker thread
&nbsp;&nbsp;&nbsp; Console.WriteLine =
(e.Argument);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // writes =
"Message to worker"
&nbsp;&nbsp;&nbsp; // Perform time-consuming task...
&nbsp; }
}
</PRE>
<P><CODE>BackgroundWorker</CODE> has a <CODE>RunWorkerCompleted</CODE> =
event=20
that fires after the <CODE>DoWork</CODE> event handler has done its job. =

Handling <CODE>RunWorkerCompleted</CODE> is not mandatory, but you =
usually do so=20
in order to query any exception that was thrown in <CODE>DoWork</CODE>. =
Further,=20
code within a <CODE>RunWorkerCompleted</CODE> event handler is able to =
update=20
user interface controls without explicit marshaling; code within the=20
<CODE>DoWork</CODE> event handler cannot.</P>
<P>To add support for progress reporting:</P>
<OL>
  <LI>Set the <CODE>WorkerReportsProgress</CODE> property to=20
  <CODE>true</CODE>.</LI>
  <LI>Periodically call <CODE>ReportProgress</CODE> from within the=20
  <CODE>DoWork</CODE> event handler with a =E2=80=9Cpercentage =
complete=E2=80=9D value, and=20
  optionally, a user-state object.</LI>
  <LI>Handle the <CODE>ProgressChanged</CODE> event, querying its event=20
  argument=E2=80=99s <CODE>ProgressPercentage</CODE> property.</LI>
  <LI>Code in the <CODE>ProgressChanged</CODE> event handler is free to =
interact=20
  with UI controls just as with <CODE>RunWorkerCompleted</CODE>. This is =

  typically where you will update a progress bar.</LI></OL>
<P>To add support for cancellation:</P>
<OL>
  <LI>Set the <CODE>WorkerSupportsCancellation</CODE> property to=20
  <CODE>true</CODE>.</LI>
  <LI>Periodically check the <CODE>CancellationPending</CODE> property =
from=20
  within the <CODE>DoWork</CODE> event handler. If it=E2=80=99s =
<CODE>true</CODE>, set=20
  the event argument=E2=80=99s <CODE>Cancel</CODE> property to =
<CODE>true</CODE>, and=20
  return. (The worker can also set <CODE>Cancel</CODE> and exit without=20
  <CODE>CancellationPending</CODE> being <CODE>true</CODE> if it decides =
that=20
  the job is too difficult and it can=E2=80=99t go on.)</LI>
  <LI>Call <CODE>CancelAsync</CODE> to request cancellation.</LI></OL>
<P>Here=E2=80=99s an example that implements all the preceding =
features:</P><PRE class=3Dsh_csharp>using System;
using System.Threading;
using System.ComponentModel;
=20
class Program
{
&nbsp; static BackgroundWorker _bw;
=20
&nbsp; static void Main()
&nbsp; {
&nbsp;&nbsp;&nbsp; _bw =3D new BackgroundWorker
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WorkerReportsProgress =3D true,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WorkerSupportsCancellation =3D true
&nbsp;&nbsp;&nbsp; };
&nbsp;&nbsp;&nbsp; _bw.DoWork +=3D bw_DoWork;
&nbsp;&nbsp;&nbsp; _bw.ProgressChanged +=3D bw_ProgressChanged;
&nbsp;&nbsp;&nbsp; _bw.RunWorkerCompleted +=3D bw_RunWorkerCompleted;
=20
&nbsp;&nbsp;&nbsp; _bw.RunWorkerAsync ("Hello to worker");
=20
&nbsp;&nbsp;&nbsp; Console.WriteLine ("Press Enter in the next 5 seconds =
to cancel");
&nbsp;&nbsp;&nbsp; Console.ReadLine();
&nbsp;&nbsp;&nbsp; if (_bw.IsBusy) _bw.CancelAsync();
&nbsp;&nbsp;&nbsp; Console.ReadLine();
&nbsp; }
=20
&nbsp; static void bw_DoWork (object sender, DoWorkEventArgs e)
&nbsp; {
&nbsp;&nbsp;&nbsp; for (int i =3D 0; i &lt;=3D 100; i +=3D 20)
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (_bw.CancellationPending) { e.Cancel =
=3D true; return; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _bw.ReportProgress (i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Thread.Sleep =
(1000);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Just for the demo... don't go =
sleeping
&nbsp;&nbsp;&nbsp; =
}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp; // for real in pooled threads!
=20
&nbsp;&nbsp;&nbsp; e.Result =3D 123;&nbsp;&nbsp;&nbsp; // This gets =
passed to RunWorkerCompleted
&nbsp; }
=20
&nbsp; static void bw_RunWorkerCompleted (object sender,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ru=
nWorkerCompletedEventArgs e)
&nbsp; {
&nbsp;&nbsp;&nbsp; if (e.Cancelled)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine ("You canceled!");
&nbsp;&nbsp;&nbsp; else if (e.Error !=3D null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine ("Worker exception: " + =
e.Error.ToString());
&nbsp;&nbsp;&nbsp; else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine ("Complete: " + =
e.Result);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // from DoWork
&nbsp; }
=20
&nbsp; static void bw_ProgressChanged (object sender,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
ProgressChangedEventArgs e)
&nbsp; {
&nbsp;&nbsp;&nbsp; Console.WriteLine ("Reached " + e.ProgressPercentage =
+ "%");
&nbsp; }
}
</PRE><PRE class=3Doutput>Press Enter in the next 5 seconds to cancel
Reached 0%
Reached 20%
Reached 40%
Reached 60%
Reached 80%
Reached 100%
Complete: 123
=20
Press Enter in the next 5 seconds to cancel
Reached 0%
Reached 20%
Reached 40%
=20
You canceled!
</PRE>
<H2><A name=3D_Subclassing_BackgroundWorker>Subclassing =
BackgroundWorker</A> </H2>
<P class=3Dnote>Subclassing <CODE>BackgroundWorker</CODE> is an easy way =
to=20
implement the <A=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Event-Based_Asynchr=
onous_Pattern">EAP</A>,=20
in cases when you need to offer only one asynchronously executing =
method.</P>
<P><CODE>BackgroundWorker</CODE> is not sealed and provides a virtual=20
<CODE>OnDoWork</CODE> method, suggesting another pattern for its use. In =
writing=20
a potentially long-running method, you could write an additional version =

returning a subclassed <CODE>BackgroundWorker</CODE>, preconfigured to =
perform=20
the job concurrently. The consumer then needs to handle only the=20
<CODE>RunWorkerCompleted</CODE> and <CODE>ProgressChanged</CODE> events. =
For=20
instance, suppose we wrote a time-consuming method called=20
<CODE>GetFinancialTotals</CODE>:</P><PRE class=3Dsh_csharp>public class =
Client
{
&nbsp; Dictionary &lt;string,int&gt; GetFinancialTotals (int foo, int =
bar) { ... }
&nbsp; ...
}
</PRE>
<P>We could refactor it as follows:</P><PRE class=3Dsh_csharp>public =
class Client
{
&nbsp; public FinancialWorker GetFinancialTotalsBackground (int foo, int =
bar)
&nbsp; {
&nbsp;&nbsp;&nbsp; return new FinancialWorker (foo, bar);
&nbsp; }
}
=20
public class FinancialWorker : BackgroundWorker
{
&nbsp; public Dictionary &lt;string,int&gt; Result;&nbsp;&nbsp; // You =
can add typed fields.
&nbsp; public readonly int Foo, Bar;
=20
&nbsp; public FinancialWorker()
&nbsp; {
&nbsp;&nbsp;&nbsp; WorkerReportsProgress =3D true;
&nbsp;&nbsp;&nbsp; WorkerSupportsCancellation =3D true;
&nbsp; }
=20
&nbsp; public FinancialWorker (int foo, int bar) : this()
&nbsp; {
&nbsp;&nbsp;&nbsp; this.Foo =3D foo; this.Bar =3D bar;
&nbsp; }
=20
&nbsp; protected override void OnDoWork (DoWorkEventArgs e)
&nbsp; {
&nbsp;&nbsp;&nbsp; ReportProgress (0, "Working hard on this report...");
=20
&nbsp;&nbsp;&nbsp; // Initialize financial report data
&nbsp;&nbsp;&nbsp; // ...
=20
&nbsp;&nbsp; &nbsp;while (!<I>&lt;finished report&gt;</I>)
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (CancellationPending) { e.Cancel =3D =
true; return; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Perform another calculation step ...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReportProgress =
(<I>percentCompleteCalc</I>, "Getting there...");
&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp; ReportProgress (100, "Done!");
&nbsp;&nbsp;&nbsp; e.Result =3D Result =3D <I>&lt;completed report =
data&gt;</I>;
&nbsp; }
}
</PRE>
<P>Whoever calls <CODE>GetFinancialTotalsBackground</CODE> then gets a=20
<CODE>FinancialWorker</CODE>: a wrapper to manage the background =
operation with=20
real-world usability. It can report progress, can be canceled, is =
friendly with=20
WPF and Windows Forms applications, and handles exceptions well.</P>
<H1><A name=3D_Interrupt_and_Abort>Interrupt and Abort</A> </H1>
<P>All <A=20
href=3D"http://www.albahari.com/threading/part2.aspx#_Blocking">blocking<=
/A>=20
methods (such as <CODE>Sleep</CODE>, <CODE>Join</CODE>, =
<CODE>EndInvoke</CODE>,=20
and <CODE>Wait</CODE>) block forever if the unblocking condition is =
never met=20
and no timeout is specified. Occasionally, it can be useful to release a =
blocked=20
thread prematurely; for instance, when ending an application. Two =
methods=20
accomplish this:</P>
<UL>
  <LI><CODE>Thread.Interrupt</CODE> </LI>
  <LI><CODE>Thread.Abort</CODE> </LI></UL>
<P>The <CODE>Abort</CODE> method is also capable of ending a nonblocked =
thread =E2=80=94=20
stuck, perhaps, in an infinite loop. <CODE>Abort</CODE> is occasionally =
useful=20
in <EM>niche</EM> scenarios; <CODE>Interrupt</CODE> is almost never =
needed.</P>
<P class=3Dwarning><CODE>Interrupt</CODE> and <CODE>Abort</CODE> can =
cause=20
considerable trouble: it=E2=80=99s precisely because they <EM>seem</EM> =
like obvious=20
choices in solving a range of problems that it=E2=80=99s worth examining =
their=20
pitfalls.</P>
<H2><A name=3D_Interrupt>Interrupt</A> </H2>
<P>Calling <CODE>Interrupt</CODE> on a <A=20
href=3D"http://www.albahari.com/threading/part2.aspx#_Blocking">blocked</=
A> thread=20
forcibly releases it, throwing a =
<CODE>ThreadInterruptedException</CODE>, as=20
follows:</P><PRE class=3Dsh_csharp>static void Main()
{
&nbsp; Thread t =3D new Thread (delegate()
&nbsp; {
&nbsp;&nbsp;&nbsp; try { Thread.Sleep (Timeout.Infinite); }
&nbsp;&nbsp;&nbsp; catch (ThreadInterruptedException) { Console.Write =
("Forcibly "); }
&nbsp;&nbsp;&nbsp; Console.WriteLine ("Woken!");
&nbsp; });
&nbsp; t.Start();
&nbsp; t.Interrupt();
}
</PRE><PRE class=3Doutput>Forcibly Woken!
</PRE>
<P>Interrupting a thread does not cause the thread to end, unless the=20
<CODE>ThreadInterruptedException</CODE> is unhandled.</P>
<P>If <CODE>Interrupt</CODE> is called on a thread that=E2=80=99s not =
blocked, the=20
thread continues executing until it next blocks, at which point a=20
<CODE>ThreadInterruptedException</CODE> is thrown. This avoids the need =
for the=20
following test:</P><PRE class=3Dsh_csharp>if ((worker.ThreadState &amp; =
ThreadState.WaitSleepJoin) &gt; 0)
&nbsp; worker.Interrupt();
</PRE>
<P>which is not thread-safe because of the possibility of preemption =
between the=20
<CODE>if</CODE> statement and <CODE>worker.Interrupt</CODE>.</P>
<P>Interrupting a thread arbitrarily is dangerous, however, because any=20
framework or third-party methods in the calling stack could unexpectedly =
receive=20
the interrupt rather than your intended code. All it would take is for =
the=20
thread to block briefly on a simple <A=20
href=3D"http://www.albahari.com/threading/part2.aspx#_Locking">lock</A> =
or=20
synchronization resource, and any pending interruption would kick in. If =
the=20
method isn=E2=80=99t designed to be interrupted (with appropriate =
cleanup code in=20
<CODE>finally</CODE> blocks), objects could be left in an unusable state =
or=20
resources incompletely released.</P>
<P>Moreover, <CODE>Interrupt</CODE> is unnecessary: if you are writing =
the code=20
that blocks, you can achieve the same result more safely with a =
signaling=20
construct =E2=80=94 or Framework 4.0=E2=80=99s <A=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Safe_Cancellation">=
cancellation=20
tokens</A>. And if you want to =E2=80=9Cunblock=E2=80=9D someone =
else=E2=80=99s code, <CODE>Abort</CODE>=20
is nearly always more useful.</P>
<H2><A name=3D_Abort>Abort</A> </H2>
<P>A <A =
href=3D"http://www.albahari.com/threading/part2.aspx#_Blocking">blocked=20
thread</A> can also be forcibly released via its <CODE>Abort</CODE> =
method. This=20
has an effect similar to calling <CODE>Interrupt</CODE>, except that a=20
<CODE>ThreadAbortException</CODE> is thrown instead of a=20
<CODE>ThreadInterruptedException</CODE>. Furthermore, the exception will =
be=20
rethrown at the end of the <CODE>catch</CODE> block (in an attempt to =
terminate=20
the thread for good) unless <CODE>Thread.ResetAbort</CODE> is called =
within the=20
<CODE>catch</CODE> block. In the interim, the thread has a <CODE><A=20
href=3D"http://www.albahari.com/threading/part2.aspx#_ThreadState">Thread=
State</A></CODE>=20
of <CODE>AbortRequested</CODE>.</P>
<P class=3Dnote>An unhandled <CODE>ThreadAbortException</CODE> is one of =
only two=20
types of exception that does not <A=20
href=3D"http://www.albahari.com/threading/#_Exception_Handling">cause =
application=20
shutdown</A> (the other is <CODE>AppDomainUnloadException</CODE>). </P>
<P>The big difference between <CODE>Interrupt</CODE> and =
<CODE>Abort</CODE> is=20
what happens when it=E2=80=99s called on a thread that is not blocked. =
Whereas=20
<CODE>Interrupt</CODE> waits until the thread next blocks before doing =
anything,=20
<CODE>Abort</CODE> throws an exception on the thread right where =
it=E2=80=99s executing=20
(unmanaged code excepted). This is a problem because .NET Framework code =
might=20
be aborted =E2=80=94 code that is not abort-safe. For example, if an =
abort occurs while=20
a <CODE>FileStream</CODE> is being constructed, it=E2=80=99s possible =
that an unmanaged=20
file handle will remain open until the application domain ends. This =
rules out=20
using <CODE>Abort</CODE> in almost any nontrivial context.</P>
<P class=3Dnote>For more detail on why Abort is unsafe, see <A=20
href=3D"http://www.albahari.com/threading/part4.aspx#_Aborting_Threads">A=
borting=20
Threads</A> in Part 4.</P>
<P>There are two cases, though, where you can safely use =
<CODE>Abort</CODE>. One=20
is if you are willing to tear down a thread=E2=80=99s application domain =
after it is=20
aborted. A good example of when you might do this is in writing a =
unit-testing=20
framework. Another case where you can call <CODE>Abort</CODE> safely is =
on your=20
own thread (because you know exactly where you are). Aborting your own =
thread=20
throws an =E2=80=9Cunswallowable=E2=80=9D exception: one that gets =
rethrown after each catch=20
block. ASP.NET does exactly this when you call =
<CODE>Redirect</CODE>.</P>
<P class=3Dnote><A href=3D"http://www.linqpad.net/">LINQPad</A> aborts =
threads when=20
you cancel a runaway query. After aborting, it dismantles and re-creates =
the=20
query=E2=80=99s application domain to avoid the potentially polluted =
state that could=20
otherwise occur.</P>
<H1><A name=3D_Safe_Cancellation>Safe Cancellation</A> </H1>
<P>As we saw in the preceding section, calling <CODE>Abort</CODE> on a =
thread is=20
dangerous in most scenarios. The alternative, then, is to implement a=20
<EM>cooperative</EM> pattern whereby the worker periodically checks a =
flag that=20
indicates whether it should abort (like in <CODE><A=20
href=3D"http://www.albahari.com/threading/part3.aspx#_BackgroundWorker">B=
ackgroundWorker</A></CODE>).=20
To cancel, the instigator simply sets the flag, and then waits for the =
worker to=20
comply. This <CODE>BackgroundWorker</CODE> helper class implements such =
a=20
flag-based cancellation pattern, and you easily implement one =
yourself.</P>
<P>The obvious disadvantage is that the worker method must be written =
explicitly=20
to support cancellation. Nonetheless, this is one of the few safe =
cancellation=20
patterns. To illustrate this pattern, we=E2=80=99ll first write a class =
to encapsulate=20
the cancellation flag:</P><PRE class=3Dsh_csharp>class RulyCanceler
{
&nbsp; object _cancelLocker =3D new object();
&nbsp; bool _cancelRequest;
&nbsp; public bool IsCancellationRequested
&nbsp; {
&nbsp;&nbsp;&nbsp; get { lock (_cancelLocker) return _cancelRequest; }
&nbsp; }
=20
&nbsp; public void Cancel() { lock (_cancelLocker) _cancelRequest =3D =
true; }=20
=20
&nbsp; public void ThrowIfCancellationRequested()
&nbsp; {
&nbsp;&nbsp;&nbsp; if (IsCancellationRequested) throw new =
OperationCanceledException();
&nbsp; }
}
</PRE>
<P class=3Dnote><CODE>OperationCanceledException</CODE> is a Framework =
type=20
intended for just this purpose. Any exception class will work just as =
well,=20
though.</P>
<P>We can use this as follows:</P><PRE class=3Dsh_csharp>class Test
{
&nbsp; static void Main()
&nbsp; {
&nbsp;&nbsp;&nbsp; var canceler =3D new RulyCanceler();
&nbsp;&nbsp;&nbsp; new Thread (() =3D&gt; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try { =
Work (canceler); }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch =
(OperationCanceledException)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp; Console.WriteLine ("Canceled!");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }).Start();
&nbsp;&nbsp;&nbsp; Thread.Sleep (1000);
&nbsp;&nbsp;&nbsp; =
canceler.Cancel();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Safely cancel worker.
&nbsp; }
=20
&nbsp; static void Work (RulyCanceler c)
&nbsp; {
&nbsp;&nbsp;&nbsp; while (true)
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c.ThrowIfCancellationRequested();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { =
OtherMethod (c); }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finally&nbsp; { /* any required cleanup =
*/ }
&nbsp;&nbsp;&nbsp; }
&nbsp; }
=20
&nbsp; static void OtherMethod (RulyCanceler c)
&nbsp; {
&nbsp;&nbsp;&nbsp; // Do stuff...
&nbsp;&nbsp;&nbsp; c.ThrowIfCancellationRequested();
&nbsp; }
}
</PRE>
<P>We could simplify our example by eliminating the =
<CODE>RulyCanceler</CODE>=20
class and adding the static boolean field <CODE>_cancelRequest</CODE> to =
the=20
<CODE>Test</CODE> class. However, doing so would mean that if several =
threads=20
called <CODE>Work</CODE> at once, setting <CODE>_cancelRequest</CODE> to =

<CODE>true</CODE> would cancel all workers. Our =
<CODE>RulyCanceler</CODE> class=20
is therefore a useful abstraction. Its only inelegance is that when we =
look at=20
the <CODE>Work</CODE> method=E2=80=99s signature, the intention is =
unclear:</P><PRE class=3Dsh_csharp>static void Work (RulyCanceler c)
</PRE>
<P>Might the <CODE>Work</CODE> method itself intend to call =
<CODE>Cancel</CODE>=20
on the <CODE>RulyCanceler</CODE> object? In this instance, the answer is =
no, so=20
it would be nice if this could be enforced in the type system. Framework =
4.0=20
provides <I>cancellation tokens</I> for this exact purpose.</P>
<H2><A name=3D_Cancellation_Tokens>Cancellation Tokens</A> </H2>
<P>Framework 4.0 provides two types that formalize the cooperative =
cancellation=20
pattern that we just demonstrated: <CODE>CancellationTokenSource</CODE> =
and=20
<CODE>CancellationToken</CODE>. The two types work in tandem:</P>
<UL>
  <LI>A <CODE>CancellationTokenSource</CODE> defines a =
<CODE>Cancel</CODE>=20
  method.</LI>
  <LI>A <CODE>CancellationToken</CODE> defines an=20
  <CODE>IsCancellationRequested</CODE> property and=20
  <CODE>ThrowIfCancellationRequested</CODE> method.</LI></UL>
<P>Together, these amount to a more sophisticated version of the=20
<CODE>RulyCanceler</CODE> class in our previous example. But because the =
types=20
are separate, you can isolate the ability to cancel from the ability to =
check=20
the cancellation flag.</P>
<P>To use these types, first instantiate a =
<CODE>CancellationTokenSource</CODE>=20
object:</P><PRE class=3Dsh_csharp>var cancelSource =3D new =
CancellationTokenSource();
</PRE>
<P>Then, pass its <CODE>Token</CODE> property into a method for which =
you=E2=80=99d like=20
to support cancellation:</P><PRE class=3Dsh_csharp>new Thread (() =
=3D&gt; Work (<B>cancelSource.Token</B>)).Start();
</PRE>
<P>Here=E2=80=99s how <CODE>Work</CODE> would be defined:</P><PRE =
class=3Dsh_csharp>void Work (CancellationToken cancelToken)
{
&nbsp; cancelToken.ThrowIfCancellationRequested();
&nbsp; ...
}
</PRE>
<P>When you want to cancel, simply call <CODE>Cancel</CODE> on=20
<CODE>cancelSource</CODE>.</P>
<P class=3Dnote><CODE>CancellationToken</CODE> is actually a struct, =
although you=20
can treat it like a class. When implicitly copied, the copies behave =
identically=20
and reference the original <CODE>CancellationTokenSource</CODE>.</P>
<P>The <CODE>CancellationToken</CODE> struct provides two additional =
useful=20
members. The first is <CODE>WaitHandle</CODE>, which returns a <A=20
href=3D"http://www.albahari.com/threading/part2.aspx#_Signaling_with_Even=
t_Wait_Handles">wait=20
handle</A> that=E2=80=99s signaled when the token is canceled. The =
second is=20
<CODE>Register</CODE>, which lets you register a callback delegate that =
will be=20
fired upon cancellation.</P>
<P>Cancellation tokens are used within the .NET Framework itself, most =
notably=20
in the following classes:</P>
<UL>
  <LI><CODE><A=20
  =
href=3D"http://www.albahari.com/threading/part2.aspx#_ManualResetEvent">M=
anualResetEventSlim</A>=20
  </CODE>and <CODE><A=20
  =
href=3D"http://www.albahari.com/threading/part2.aspx#_Semaphore">Semaphor=
eSlim</A></CODE></LI>
  <LI><CODE><A=20
  =
href=3D"http://www.albahari.com/threading/part2.aspx#_CountdownEvent">Cou=
ntdownEvent</A>=20
  </CODE></LI>
  <LI><CODE><A=20
  =
href=3D"http://www.albahari.com/threading/part4.aspx#_The_Barrier_Class">=
Barrier</A>=20
  </CODE></LI>
  <LI><CODE>BlockingCollection</CODE> </LI>
  <LI><A =
href=3D"http://www.albahari.com/threading/part5.aspx#_PLINQ">PLINQ</A>=20
  and the <A=20
  =
href=3D"http://www.albahari.com/threading/part5.aspx#_The_Parallel_Class"=
>Task=20
  Parallel Library</A></LI></UL>
<P>Most of these classes=E2=80=99 use of cancellation tokens is in their =

<CODE>Wait</CODE> methods. For example, if you <CODE>Wait</CODE> on a=20
<CODE>ManualResetEventSlim</CODE> and specify a cancellation token, =
another=20
thread can <CODE>Cancel</CODE> its wait. This is much tidier and safer =
than=20
calling <CODE><A=20
href=3D"http://www.albahari.com/threading/part3.aspx#_Interrupt">Interrup=
t</A></CODE>=20
on the blocked thread.</P>
<H1><A name=3D_Lazy_Initialization>Lazy Initialization</A> </H1>
<P>A common problem in threading is how to lazily initialize a shared =
field in a=20
thread-safe fashion. The need arises when you have a field of a type =
that=E2=80=99s=20
expensive to construct:</P><PRE class=3Dsh_csharp>class Foo
{
&nbsp; <B>public readonly Expensive Expensive =3D new Expensive();</B>
&nbsp; <B>...</B>
}
class Expensive {&nbsp; /* Suppose this is expensive to construct =
*/&nbsp; }
</PRE>
<P>The problem with this code is that instantiating <CODE>Foo</CODE> =
incurs the=20
performance cost of instantiating <CODE>Expensive</CODE> =E2=80=94 =
whether or not the=20
<CODE>Expensive</CODE> field is ever accessed. The obvious answer is to=20
construct the instance <EM>on demand</EM>:</P><PRE =
class=3Dsh_csharp>class Foo
{
&nbsp; Expensive _expensive;
&nbsp; public =
Expensive&nbsp;Expensive&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =
<I>Lazily</I> instantiate Expensive
&nbsp; {
&nbsp;&nbsp;&nbsp; get
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (_expensive =3D=3D null) _expensive =
=3D new Expensive();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _expensive;
&nbsp;&nbsp;&nbsp; }
&nbsp; }
&nbsp; ...
}
</PRE>
<P>The question then arises, is this thread-safe? Aside from the fact =
that we=E2=80=99re=20
accessing <CODE>_expensive</CODE> outside a <A=20
href=3D"http://www.albahari.com/threading/part2.aspx#_Locking">lock</A> =
without a=20
<A=20
href=3D"http://www.albahari.com/threading/part4.aspx#_Memory_Barriers_and=
_Volatility">memory=20
barrier</A>, consider what would happen if two threads accessed this =
property at=20
once. They could both satisfy the <CODE>if</CODE> statement=E2=80=99s =
predicate and each=20
thread end up with a <EM>different</EM> instance of =
<CODE>Expensive</CODE>. As=20
this may lead to subtle errors, we would say, in general, that this code =
is not=20
thread-safe.</P>
<P>The solution to the problem is to lock around checking and =
initializing the=20
object: </P><PRE class=3Dsh_csharp>Expensive _expensive;
readonly object <B>_expenseLock</B> =3D new object();
=20
public Expensive Expensive
{
&nbsp; get
&nbsp; {
    <B>lock (_expenseLock)</B>
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (_expensive =3D=3D null) _expensive =
=3D new Expensive();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return _expensive;
&nbsp;&nbsp;&nbsp; }
&nbsp; }
}
</PRE>
<H2><A name=3D_LazyT>Lazy&lt;T&gt;</A> </H2>
<P>Framework 4.0 provides a new class called <CODE>Lazy&lt;T&gt;</CODE> =
to help=20
with lazy initialization. If instantiated with an argument of =
<CODE>true</CODE>,=20
it implements the thread-safe initialization pattern just described.</P>
<P class=3Dnote><CODE>Lazy&lt;T&gt;</CODE> actually implements a =
slightly more=20
efficient version of this pattern, called <I>double-checked locking</I>. =

Double-checked locking performs an additional <A=20
href=3D"http://www.albahari.com/threading/part4.aspx#_The_volatile_keywor=
d">volatile=20
read</A> to avoid the cost of obtaining a <A=20
href=3D"http://www.albahari.com/threading/part2.aspx#_Locking">lock</A> =
if the=20
object is already initialized.</P>
<P>To use <CODE>Lazy&lt;T&gt;</CODE>, instantiate the class with a value =
factory=20
delegate that tells it how to initialize a new value, and the argument=20
<CODE>true</CODE>. Then access its value via the <CODE>Value</CODE>=20
property:</P><PRE class=3Dsh_csharp>Lazy&lt;Expensive&gt; _expensive =3D =
new Lazy&lt;Expensive&gt;
&nbsp; (() =3D&gt; new Expensive(), true);
=20
public Expensive Expensive { get { return _expensive.<B>Value</B>; } }
</PRE>
<P>If you pass <CODE>false</CODE> into =
<CODE>Lazy&lt;T&gt;</CODE>=E2=80=99s constructor,=20
it implements the thread-unsafe lazy initialization pattern that we =
described at=20
the start of this section =E2=80=94 this makes sense when you want to =
use=20
<CODE>Lazy&lt;T&gt;</CODE> in a single-threaded context.</P>
<H2><A name=3D_LazyInitializer>LazyInitializer</A> </H2>
<P><CODE>LazyInitializer</CODE> is a static class that works exactly =
like=20
<CODE>Lazy&lt;T&gt;</CODE> except:</P>
<UL>
  <LI>Its functionality is exposed through a static method that operates =

  directly on a field in your own type. This avoids a level of =
indirection,=20
  improving performance in cases where you need extreme =
optimization.</LI>
  <LI>It offers another mode of initialization that has multiple threads =
race to=20
  initialize.</LI></UL>
<P>To use <CODE>LazyInitializer</CODE>, call =
<CODE>EnsureInitialized</CODE>=20
before accessing the field, passing a reference to the field and the =
factory=20
delegate:</P><PRE class=3Dsh_csharp>Expensive _expensive;
public Expensive Expensive
{=20
&nbsp; get&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =
Implement double-checked locking
&nbsp;&nbsp;{=20
&nbsp;&nbsp;&nbsp; LazyInitializer.EnsureInitialized (ref _expensive,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
&nbsp;() =3D&gt; new Expensive());
&nbsp;&nbsp; &nbsp;return _expensive;
&nbsp;&nbsp;}
}
</PRE>
<P>You can also pass in another argument to request that competing =
threads=20
<EM>race</EM> to initialize. This sounds similar to our original =
thread-unsafe=20
example, except that the first thread to finish always wins =E2=80=94 =
and so you end up=20
with only one instance. The advantage of this technique is that =
it=E2=80=99s even faster=20
(on multicores) than double-checked locking =E2=80=94 because it can be =
implemented=20
entirely without locks. This is an extreme optimization that you rarely =
need,=20
and one that comes at a cost:</P>
<UL>
  <LI>It=E2=80=99s slower when more threads race to initialize than you =
have cores.</LI>
  <LI>It potentially wastes CPU resources performing redundant=20
  initialization.</LI>
  <LI>The initialization logic must be thread-safe (in this case, it =
would be=20
  thread-unsafe if <CODE>Expensive</CODE>=E2=80=99s constructor wrote to =
static fields,=20
  for instance).</LI>
  <LI>If the initializer instantiates an object requiring disposal, the =
=E2=80=9Cwasted=E2=80=9D=20
  object won=E2=80=99t get disposed without additional logic.</LI></UL>
<P>For reference, here=E2=80=99s how double-checked locking is =
implemented:</P><PRE class=3Dsh_csharp>volatile Expensive _expensive;
public Expensive Expensive
{
  get
  {
    if (_expensive =3D=3D null)             // First check (outside =
lock)
      lock (_expenseLock)
        if (_expensive =3D=3D null)         // Second check (inside =
lock)
          _expensive =3D new Expensive();
    return _expensive;
  }
}
</PRE>
<P>And here=E2=80=99s how the race-to-initialize pattern is =
implemented:</P><PRE class=3Dsh_csharp>volatile Expensive _expensive;
public Expensive Expensive
{
&nbsp; get
&nbsp; {
&nbsp;&nbsp;&nbsp; if (_expensive =3D=3D null)
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var instance =3D new Expensive();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Interlocked.CompareExchange (ref =
_expensive, instance, null);
&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp; return _expensive;
&nbsp; }
}
</PRE>
<H1><A name=3D_Thread-Local_Storage>Thread-Local Storage</A> </H1>
<P>Much of this article has focused on synchronization constructs and =
the issues=20
arising from having threads concurrently access the same data. =
Sometimes,=20
however, you want to keep data isolated, ensuring that each thread has a =

separate copy. Local variables achieve exactly this, but they are useful =
only=20
with transient data.</P>
<P>The solution is <I>thread-local storage</I>. You might be =
hard-pressed to=20
think of a requirement: data you=E2=80=99d want to keep isolated to a =
thread tends to be=20
transient by nature. Its main application is for storing =
=E2=80=9Cout-of-band=E2=80=9D data =E2=80=94=20
that which supports the execution path=E2=80=99s infrastructure, such as =
messaging,=20
transaction, and security tokens. Passing such data around in method =
parameters=20
is extremely clumsy and alienates all but your own methods; storing such =

information in ordinary static fields means sharing it among all =
threads.</P>
<P class=3Dnote>Thread-local storage can also be useful in <A=20
href=3D"http://www.albahari.com/threading/part5.aspx#_Using_ThreadLocal">=
optimizing=20
parallel code</A>. It allows each thread to exclusively access its own =
version=20
of a thread-unsafe object without needing locks =E2=80=94 and without =
needing to=20
reconstruct that object between method calls.</P>
<P>There are three ways to implement thread-local storage.</P>
<H2><A name=3D_ThreadStatic>[ThreadStatic]</A> </H2>
<P>The easiest approach to thread-local storage is to mark a static =
field with=20
the <CODE>ThreadStatic</CODE> attribute:</P><PRE =
class=3Dsh_csharp>[ThreadStatic] static int _x;
</PRE>
<P>Each thread then sees a separate copy of <CODE>_x</CODE>.</P>
<P>Unfortunately, <CODE>[ThreadStatic]</CODE> doesn=E2=80=99t work with =
instance fields=20
(it simply does nothing); nor does it play well with field initializers =
=E2=80=94 they=20
execute only <EM>once</EM> on the thread that's running when the static=20
constructor executes. If you need to work with instance fields =E2=80=94 =
or start with a=20
nondefault value =E2=80=94 <CODE>ThreadLocal&lt;T&gt;</CODE> provides a =
better=20
option.</P>
<H2><A name=3D_ThreadLocalT>ThreadLocal&lt;T&gt;</A> </H2>
<P><CODE>ThreadLocal&lt;T&gt;</CODE> is new to Framework 4.0. It =
provides=20
thread-local storage for both static and instance fields =E2=80=94 and =
allows you to=20
specify default values.</P>
<P>Here=E2=80=99s how to create a <CODE>ThreadLocal&lt;int&gt;</CODE> =
with a default=20
value of <CODE>3</CODE> for each thread:</P><PRE =
class=3Dsh_csharp>static ThreadLocal&lt;int&gt; _x =3D new =
ThreadLocal&lt;int&gt; (() =3D&gt; 3);
</PRE>
<P>You then use <CODE>_x</CODE>=E2=80=99s <CODE>Value</CODE> property to =
get or set its=20
thread-local value. A bonus of using <CODE>ThreadLocal</CODE> is that =
values are=20
lazily evaluated: the factory function evaluates on the first call (for =
each=20
thread).</P>
<H3>ThreadLocal&lt;T&gt; and instance fields</H3>
<P><CODE>ThreadLocal&lt;T&gt;</CODE> is also useful with instance fields =
and=20
captured local variables. For example, consider the problem of =
generating random=20
numbers in a multithreaded environment. The <CODE>Random</CODE> class is =
not=20
thread-safe, so we have to either lock around using <CODE>Random</CODE>=20
(limiting concurrency) or generate a separate <CODE>Random</CODE> object =
for=20
each thread. <CODE>ThreadLocal&lt;T&gt;</CODE> makes the latter =
easy:</P><PRE class=3Dsh_csharp>var localRandom =3D <B>new =
ThreadLocal&lt;Random&gt;(() =3D&gt; new Random())</B>;
Console.WriteLine (localRandom.Value.Next());
</PRE>
<P>Our factory function for creating the <CODE>Random</CODE> object is a =
bit=20
simplistic, though, in that <CODE>Random</CODE>=E2=80=99s parameterless =
constructor=20
relies on the system clock for a random number seed. This may be the =
same for=20
two <CODE>Random</CODE> objects created within ~10 ms of each other. =
Here=E2=80=99s one=20
way to fix it:</P><PRE class=3Dsh_csharp>var localRandom =3D new =
ThreadLocal&lt;Random&gt;
&nbsp;( () =3D&gt; new Random (Guid.NewGuid().GetHashCode()) );
</PRE>
<P>We=E2=80=99ll use this in Part 5 (see the <A=20
href=3D"http://www.albahari.com/threading/part5.aspx#_Using_ThreadLocal">=
parallel=20
spellchecking example</A> in =E2=80=9CPLINQ=E2=80=9D).</P>
<H2><A name=3D_GetData_and_SetData>GetData and SetData</A> </H2>
<P>The third approach is to use two methods in the <CODE>Thread</CODE> =
class:=20
<CODE>GetData</CODE> and <CODE>SetData</CODE>. These store data in=20
thread-specific =E2=80=9Cslots=E2=80=9D. <CODE>Thread.GetData</CODE> =
reads from a thread=E2=80=99s=20
isolated data store; <CODE>Thread.SetData</CODE> writes to it. Both =
methods=20
require a <CODE>LocalDataStoreSlot</CODE> object to identify the slot. =
The same=20
slot can be used across all threads and they=E2=80=99ll still get =
separate values.=20
Here=E2=80=99s an example:</P><PRE class=3Dsh_csharp>class Test
{
&nbsp; // The same LocalDataStoreSlot object can be used across all =
threads.
&nbsp; LocalDataStoreSlot _secSlot =3D Thread.GetNamedDataSlot =
("securityLevel");
=20
&nbsp; // This property has a separate value on each thread.
&nbsp; int SecurityLevel
&nbsp; {
&nbsp;&nbsp;&nbsp; get
&nbsp;&nbsp;&nbsp; {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object data =3D Thread.GetData =
(_secSlot);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return data =3D=3D null ? 0 : (int) =
data;&nbsp;&nbsp;&nbsp; // null =3D=3D uninitialized
&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp; set { Thread.SetData (_secSlot, value); }
&nbsp; }
&nbsp; ...
</PRE>
<P>In this instance, we called <CODE>Thread.GetNamedDataSlot</CODE>, =
which=20
creates a named slot =E2=80=94 this allows sharing of that slot across =
the application.=20
Alternatively, you can control a slot=E2=80=99s scope yourself by =
instantiating a=20
<CODE>LocalDataStoreSlot</CODE> explicitly =E2=80=94 without providing =
any name:</P><PRE class=3Dsh_csharp>class Test
{
&nbsp; LocalDataStoreSlot _secSlot =3D new LocalDataStoreSlot();
&nbsp; ...
</PRE>
<P><CODE>Thread.FreeNamedDataSlot</CODE> will release a named data slot =
across=20
all threads, but only once all references to that=20
<CODE>LocalDataStoreSlot</CODE> have dropped out of scope and have been=20
garbage-collected. This ensures that threads don=E2=80=99t get data =
slots pulled out=20
from under their feet, as long as they keep a reference to the =
appropriate=20
<CODE>LocalDataStoreSlot</CODE> object while the slot is needed.</P>
<H1><A name=3D_Timers>Timers</A> </H1>
<P>If you need to execute some method repeatedly at regular intervals, =
the=20
easiest way is with a <I>timer</I>. Timers are convenient and efficient =
in their=20
use of memory and resources =E2=80=94 compared with techniques such as =
the=20
following:</P><PRE class=3Dsh_csharp>new Thread (delegate() {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
while (<I>enabled</I>)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>DoSomeAction</I>();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; Thread.Sleep (TimeSpan.FromHours (24));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }).Start();
</PRE>
<P>Not only does this permanently tie up a thread resource, but without=20
additional coding, <CODE>DoSomeAction</CODE> will happen at a later time =
each=20
day. Timers solve these problems.</P>
<P>The .NET Framework provides four timers. Two of these are =
general-purpose=20
multithreaded timers:</P>
<UL>
  <LI><CODE>System.Threading.Timer</CODE> </LI>
  <LI><CODE>System.Timers.Timer</CODE> </LI></UL>
<P>The other two are special-purpose single-threaded timers:</P>
<UL>
  <LI><CODE>System.Windows.Forms.Timer</CODE> (Windows Forms timer)</LI>
  <LI><CODE>System.Windows.Threading.DispatcherTimer</CODE> (WPF =
timer)</LI></UL>
<P>The multithreaded timers are more powerful, accurate, and flexible; =
the=20
single-threaded timers are safer and more convenient for running simple =
tasks=20
that update Windows Forms controls or WPF elements.</P>
<H2><A name=3D_Multithreaded_Timers>Multithreaded Timers</A> </H2>
<P><CODE>System.Threading.Timer</CODE> is the simplest multithreaded =
timer: it=20
has just a constructor and two methods (a delight for minimalists, as =
well as=20
book authors!). In the following example, a timer calls the =
<CODE>Tick</CODE>=20
method, which writes =E2=80=9Ctick...=E2=80=9D after five seconds have =
elapsed, and then every=20
second after that, until the user presses Enter:</P><PRE =
class=3Dsh_csharp>using System;
using System.Threading;
=20
class Program
{
&nbsp; static void Main()
&nbsp; {
&nbsp;&nbsp;&nbsp; // First interval =3D 5000ms; subsequent intervals =
=3D 1000ms
    <B>Timer tmr =3D new Timer (Tick, "tick...", 5000, 1000);</B>
&nbsp;&nbsp;&nbsp; Console.ReadLine();
&nbsp;&nbsp;&nbsp; tmr.Dispose();&nbsp;&nbsp;&nbsp;&nbsp; =
&nbsp;&nbsp;&nbsp;&nbsp;// This both stops the timer and cleans up.
&nbsp; }
=20
&nbsp; static void Tick (object data)
&nbsp; {
&nbsp;&nbsp;&nbsp; // This runs on a pooled thread
&nbsp;&nbsp;&nbsp; Console.WriteLine =
(data);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Writes =
"tick..."
&nbsp; }
}
</PRE>
<P>You can change a timer=E2=80=99s interval later by calling its =
<CODE>Change</CODE>=20
method. If you want a timer to fire just once, specify=20
<CODE>Timeout.Infinite</CODE> in the constructor=E2=80=99s last =
argument.</P>
<P>The .NET Framework provides another timer class of the same name in =
the=20
<CODE>System.Timers</CODE> namespace. This simply wraps the=20
<CODE>System.Threading.Timer</CODE>, providing additional convenience =
while=20
using the identical underlying engine. Here=E2=80=99s a summary of its =
added=20
features:</P>
<UL>
  <LI>A <CODE>Component</CODE> implementation, allowing it to be sited =
in Visual=20
  Studio=E2=80=99s designer</LI>
  <LI>An <CODE>Interval</CODE> property instead of a <CODE>Change</CODE> =

  method</LI>
  <LI>An <CODE>Elapsed</CODE><I>event</I> instead of a callback =
delegate</LI>
  <LI>An <CODE>Enabled</CODE> property to start and stop the timer (its =
default=20
  value being <CODE>false</CODE>)</LI>
  <LI><CODE>Start</CODE> and <CODE>Stop</CODE> methods in case =
you=E2=80=99re confused=20
  by <CODE>Enabled</CODE></LI>
  <LI>An <CODE>AutoReset</CODE> flag for indicating a recurring event =
(default=20
  value is <CODE>true</CODE>)</LI>
  <LI>A <CODE>SynchronizingObject</CODE> property with =
<CODE>Invoke</CODE> and=20
  <CODE>BeginInvoke</CODE> methods for <A=20
  =
href=3D"http://www.albahari.com/threading/part2.aspx#_Rich_Client_Applica=
tions">safely=20
  calling methods on WPF elements and Windows Forms =
controls</A></LI></UL>
<P>Here=E2=80=99s an example:</P><PRE class=3Dsh_csharp>using System;
using System.Timers;&nbsp;&nbsp; // Timers namespace rather than =
Threading
=20
class SystemTimer
{
&nbsp; static void Main()
&nbsp; {
&nbsp;&nbsp;&nbsp; Timer tmr =3D new =
Timer();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Doesn't require any args
&nbsp;&nbsp;&nbsp; tmr.Interval =3D 500;
&nbsp;&nbsp;&nbsp; tmr.Elapsed +=3D tmr_Elapsed;&nbsp;&nbsp;&nbsp; // =
Uses an event instead of a delegate
&nbsp;&nbsp;&nbsp; =
tmr.Start();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Start the timer
&nbsp;&nbsp;&nbsp; Console.ReadLine();
&nbsp;&nbsp;&nbsp; =
tmr.Stop();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Stop the timer
&nbsp;&nbsp;&nbsp; Console.ReadLine();
&nbsp;&nbsp;&nbsp; =
tmr.Start();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Restart the timer
&nbsp;&nbsp;&nbsp; Console.ReadLine();
&nbsp;&nbsp;&nbsp; =
tmr.Dispose();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Permanently stop the timer
&nbsp; }
=20
&nbsp; static void tmr_Elapsed (object sender, EventArgs e)
&nbsp; {
&nbsp;&nbsp;&nbsp; Console.WriteLine ("Tick");
&nbsp; }
}
</PRE>
<P>Multithreaded timers use the <A=20
href=3D"http://www.albahari.com/threading/#_Thread_Pooling">thread =
pool</A> to=20
allow a few threads to serve many timers. This means that the callback =
method or=20
<CODE>Tick</CODE> event may fire on a different thread each time it is =
called.=20
Furthermore, a <CODE>Tick</CODE> always fires (approximately) on time =
=E2=80=94=20
regardless of whether the previous <CODE>Tick</CODE> has finished =
executing.=20
Hence, callbacks or event handlers must be thread-safe.</P>
<P>The precision of multithreaded timers depends on the operating =
system, and is=20
typically in the 10=E2=80=9320 ms region. If you need greater precision, =
you can use=20
native interop and call the Windows multimedia timer. This has precision =
down to=20
1 ms and it is defined in <I>winmm.dll</I>. First call=20
<CODE>timeBeginPeriod</CODE> to inform the operating system that you =
need high=20
timing precision, and then call <CODE>timeSetEvent</CODE> to start a =
multimedia=20
timer. When you=E2=80=99re done, call <CODE>timeKillEvent</CODE> to stop =
the timer and=20
<CODE>timeEndPeriod</CODE> to inform the OS that you no longer need high =
timing=20
precision. You can find complete examples on the Internet that use the=20
multimedia timer by searching for the keywords <EM>dllimport winmm.dll=20
timesetevent</EM>.</P>
<H2><A name=3D_SingleThreaded_Timers>Single-Threaded Timers</A> </H2>
<P>The .NET Framework provides timers designed to eliminate <A=20
href=3D"http://www.albahari.com/threading/part2.aspx#_Rich_Client_Applica=
tions">thread-safety=20
issues for WPF and Windows Forms applications</A>:</P>
<UL>
  <LI><CODE>System.Windows.Threading.DispatcherTimer</CODE> (WPF)</LI>
  <LI><CODE>System.Windows.Forms.Timer</CODE> (Windows Forms)</LI></UL>
<P class=3Dwarning>The single-threaded timers are not designed to work =
outside=20
their respective environments. If you use a Windows Forms timer in a =
Windows=20
Service application, for instance, the <CODE>Timer</CODE> event =
won=E2=80=99t fire!</P>
<P>Both are like <CODE>System.Timers.Timer</CODE> in the members that =
they=20
expose (<CODE>Interval</CODE>, <CODE>Tick</CODE>, <CODE>Start</CODE>, =
and=20
<CODE>Stop</CODE>) and are used in a similar manner. However, they =
differ in how=20
they work internally. Instead of using the <A=20
href=3D"http://www.albahari.com/threading/#_Thread_Pooling">thread =
pool</A> to=20
generate timer events, the WPF and Windows Forms timers rely on the =
message=20
pumping mechanism of their underlying user interface model. This means =
that the=20
<CODE>Tick</CODE> event always fires on the same thread that originally =
created=20
the timer =E2=80=94 which, in a normal application, is the same thread =
used to manage=20
all user interface elements and controls. This has a number of =
benefits:</P>
<UL>
  <LI>You can forget about <A=20
  =
href=3D"http://www.albahari.com/threading/part2.aspx#_Thread_Safety">thre=
ad=20
  safety</A>.</LI>
  <LI>A fresh <CODE>Tick</CODE> will never fire until the previous=20
  <CODE>Tick</CODE> has finished processing.</LI>
  <LI>You can update user interface elements and controls directly from=20
  <CODE>Tick</CODE> event handling code, without calling=20
  <CODE>Control.Invoke</CODE> or =
<CODE>Dispatcher.Invoke</CODE>.</LI></UL>
<P>It sounds too good to be true, until you realize that a program =
employing=20
these timers is not really multithreaded =E2=80=94 <EM>there is no =
parallel=20
execution.</EM> One thread serves all timers =E2=80=94 as well as the =
processing UI=20
events. This brings us to the disadvantage of single-threaded =
timers:</P>
<UL>
  <LI>Unless the <CODE>Tick</CODE> event handler executes quickly, the =
user=20
  interface becomes unresponsive.</LI></UL>
<P>This makes the WPF and Windows Forms timers suitable for only small =
jobs,=20
typically those that involve updating some aspect of the user interface =
(e.g., a=20
clock or countdown display). Otherwise, you need a multithreaded =
timer.</P>
<P>In terms of precision, the single-threaded timers are similar to the=20
multithreaded timers (tens of milliseconds), although they are typically =
less=20
<EM>accurate</EM>, because they can be delayed while other user =
interface=20
requests (or other timer events) are processed.</P>
<P><A href=3D"http://www.albahari.com/threading/part2.aspx">&lt;&lt; =
Part=20
2</A>&nbsp;&nbsp; <A =
href=3D"http://www.albahari.com/threading/part4.aspx">Part 4=20
&gt;&gt;</A></P><BR>
<P style=3D"FLOAT: right"><A =
href=3D"http://validator.w3.org/check?uri=3Dreferer"><IMG=20
border=3D0 alt=3D"Valid XHTML 1.0 Transitional"=20
src=3D"http://www.w3.org/Icons/valid-xhtml10" width=3D88 =
height=3D31></A> </P>
<P style=3D"FONT-SIZE: 105%; FONT-WEIGHT: bold"><I>Threading in C#</I> =
is from=20
Chapters 21 and 22 of <A href=3D"http://www.albahari.com/nutshell/">C# =
4.0 in a=20
Nutshell</A>.</P>
<P>=C2=A9 2006-2010 Joseph Albahari, O'Reilly Media, Inc. All rights=20
reserved</P></DIV></FORM></BODY></HTML>

------=_NextPart_000_0000_01CBF56E.AFFD6CA0
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://www.albahari.com/threading/linqpadlogo.png

iVBORw0KGgoAAAANSUhEUgAAAQMAAAD5CAIAAACszcdXAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAASdAAAEnQB3mYfeAAA/7JJREFUeF7svQd4m+lxLew89/7JdeK065vrJNe9xI7jui7r7UW9d4kq
LKLYKfbeewNJdIAEWMDee29glwgCIEASJNh771Qvu5v8530/kJJsJyvtrh17vXrG8EcIhJbgnG/m
zJyZ98/+4z/+43Of/fnsE/jsEwASPvvz2Sfw2Sfwuc8+gs8+gc8+AZIZffYpfJo+gdt37oyPjQ/1
9o8N6Gcmp1aWV+7cvfvBBx98mn7G39HP8hkSfkcf7Ed8238nfz74Tfvg3z/44N/fh917eGdybGJs
cGhcPzw1OrYwO7e2tj46Mqq6qVC2ddzouCGvrOmUN9+Qt9xo7bjR1qnqVk2OT9y5c+f9D97/9//4
94/4n/Un8G2fIeG/4ZdMnB2O/RtOD3d//4P3Hr//CO6+tD4/szQ2NT8yPT8yvzq9srk4tzQ1ONpX
VVWek5zWXFWjVSqV7Z032zrb5K3p0lR2WGR8YKiMw28srejrVk4MDi/NL06Pjvcre262tPf19a5t
rT5+7xH+zf+GH/iP4Z/8DAm/w98S9XXmD+P3hmvc2uHx733w+L33H8HvYbiAPXh8b3VzeXx6uONG
e2ZyRk5iSl1RWUtNY1u9vLGqLitJFuTm5W5lxw2LkFdVjQ0Pz05Ory4uj/bpmiqrC5LTEmLio3wC
uGGRoui4wvRMZVv7wszso0cPV+YXVK2daqUaYCCR4TMw/Lbf+WdI+LhIeMrFn77EPZ/kM8Tdqccb
Lj54DL/furO+uDY/uzQ5uzQ1t0JsfnVmcX1udHI4IzXT67qLvcnVYBf3VK6g96Zic319Y3VV0SQH
KjLFEn4EK9I3INTThxUYki6WqG50LS8t3rt3b1CtEbM4UX6BqUnSzPSUgtxMmTghUyztbmnd3tra
Wl9Xdyq0Ws3tu7cBy4/7M38av/8zJHzE3+rOrZ64u+EGT50e17sZzsat1eXNhaWNecZwvbq9vLK1
WFRYEBscHu7tn8hil2fl1ReXy8trG8ur81LSw9y9fRycWQHB7KBQYQQrQ5zYWF45Pjzy4P6DDz54
v7WhKZkvFrDYglh2ZFCo3dVrbtZ2eJORIf3du3elfGFVfsni6uL9R3cfvnd/fnm+uroyLiy8NDsP
YFhZWL7R3D4xPfbe++99xJ/5U/1tnyHhQ369TG6zS1gZ2sok9PB7JPTb9zY2bq+u315Zv7WCx807
a1t3N5bXFzs7b/Bi2NEBIblSWWlmXllGbqEss6qgJF2YEOnl6+vgLIyKqczJU7S0ToyMrq0sL0zP
6JSa2uKydIE4yMUz1M+fH8/2vO7kdM0mwse/sbJ6fXnl1sZ2v1rT0dza0tyWJE0yOX8BYLC/ZhXq
7Tc7NYWfRNHU2tly4/aDW+99QKLQ4/cfDo4OJMRz6opL79y+re/Tdba23bqNsPAZW/j13/tnSCCf
yFPubijRUNc33O8fvfcAHn/7wdat+8RuP9i++/A27NaD7YaGBlE8X8rhFaRkFKVk5Cell2bkV+QX
ZyWlRXsHhHv4pgtETWWVQ9rejfW15YWlkf7Blpr66vyiNL5IFBkbFxjqaefgYe+QJhQP9fY9evxo
e2Ozuby6JCt3YXVp6+6Wt7untYmZmdElBwurNIF4cXYW9Z8R/XBBZq6Pq8epw0ftLKzycvM722+E
uHsDsXdv3arILphfmEcOhi+Z6NRxsyUuMEzTqVhfWrnZ3D4zPfsZEn7z/venhYSnPX6HxRKPZzwG
Hg/Oev/xXRgukGDAtu9u9fb15qdlZ4qT86WyLGFyfnJmQ3ltc0OLlCs+f+yEh/X17ATp+NDQo0eP
7ty9MzM+2dnUUpFbkJuUKgiPYQeHBTi7etrYBzi55kiSV5aW7j94MDE82lRRkyyW5GblpqVm+Lp7
XjW65GJpky1NeoxU698/ULV3yevkBXlFF06cOn/8pI2ZuVzeIuLwi7Nybm1uba6uN1fWBrl7nTh0
OJYV+eC9+5t3NvixbElMPH7A9tpGdbcG//1M/gaKvLK+lJqYlCfLeHDvQU+Xqlet/VSnOR/xh/sU
IuE/p7A7/PWDnYoNzeyRQjx6/0G/biArJSOFl5ghkGYIErPEKTWl1U31zYJ47pWTZxyuXksTiLZW
195//73Nzc0BtaaqAHlMljSWA18PdnHzsrb3v+4i4wrGB4fgzZvrG8rmNjBaL2fX/JyCvJwCO1Nz
y8vG7ta29UXFjx+inrPYUS8fnhyuqq06d+LU5TPnbMyu+bl6RHj7I4/Hj9BUViHgcA/v2bf/zbfj
Y9grm8vTc9NpCUnqtg78qrs7Onyd3W0trSqryh69/3BmYUY/NmR14TK+cWJ4rKmy9tbmNnPjZz6N
m8pmCVdw+9atseGRrub2j+gsn+pv+yNGwq7H7/6+aUJP+OuOkZz+fQOjfQSPWVidK8zKz01Ky5am
ZEtSC9Kzb7TfrKmuC/T0sbxiEu7prW5te/89Umfc3NgcUPZUZOYksbmCKJYgPIofFhkXECKKjKkt
KFpfWX7w8NGAtq8iJ8/PyS0yKKQgt1AiTLA3t7Q1M5fEc2dHxx49fKS9qZLX1i6uL3m4eFw+fc74
3AW3646O12zShYnrK2uTwyO1pRUBnr7733rnwqnTOXmZ8yuzYjafGxqB/4Cp8YkkjnDPm2++8tOf
g2ozpaeqqqJUcSIyqKG+/gyxJCSE9fUf7fv/vvTaP3zjhG9UlJeTc21RCf7LgVKwgqf9tqqojBMa
MdI/MDc93dXc+ql26Y/4w/2RIWEnvWFo6zNGKSxxd92Arq6svCw3t7ygoLG2tqdHPTY+3tLczAqP
CPPxkfEEvR2KjbX1e3fvjQ+PtlbX50pS2GFRnJCwMHcv1G3igkLyk1JHBgbxbz16/Bjd3OLUDGFE
dICbZ1xkbICHl5OVTSpfqGxqfv/xe1OjE/Xlldpezer2akVVKXzd5LyRram5kBW3Nr9w787djtrG
jraOI3v3H99/8NThI51dN1e3ltOSJBpF951b2wp5i6e946u//OVVEzO1RoXQtLQxF+LmtbKwiH9d
GhMXHhh0+PRlS2e3N06bfPPlk+/sO+193Vnb1b00O1tfVObuF/1n//Srz33/yJ/95Mze8x4xIeHJ
cRyQDeRmxQWFJSUlKpVqdXUVXbyqopJQNy91a/v8zKyiue0jOsun+tv+EJHwX7o7bo2PkLsP6Pqb
62sbqivbmht6NPD1sdHxsayM9BBfHyTQKRxBb1c39AgDKnVngxwEVBjLiQkMYQeFiaNYSXHsbLG0
taZ+eZ443PrqWkddgyA6zue6U6CbV6iXLyisu50jKyhYXlmNmyuqOqj5tDQ1T8xOeLi4w9etjE3D
PX3aquru3703pNV1NrdVllf6eHkd33fQxOhybl5OT58qLjRibWl5bmIyLzV931tvv/bzX7g7u23e
WYe7t7a3FGXmouGFVIoTHnXh5CmjCxc9/YKve4QcP3/d5urVusJi/IcVZhclJqb+wytHPv/S2//j
l+9+7o1Dvzxy2t7YvK2uAU2G1tr6nPSctPyytKwibkJSTCznuulVrn/Qe++9X5Gbn5Yqy8zOqqqp
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

------=_NextPart_000_0000_01CBF56E.AFFD6CA0
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: http://www.w3.org/Icons/valid-xhtml10

iVBORw0KGgoAAAANSUhEUgAAAFgAAAAfCAMAAABUFvrSAAADAFBMVEUBAAAIBgMMCQQLCwsSDgYX
EgkaFQoUFBQcHBwlHQ4rIhEwJhM2KxU7Lxc9MBgjIyMoKCg0MzI7OztBNBpOPh5OSz9TQiFeSyVk
UChqVCpuWCx1Rzl0XC5+ZDFOTk5ST0tWUk1VVVVcXFxqXUplZWVra2twcHB7e3sAWpwIX58JYJ8O
Y6ERZaIVaKQaa6Yebaghb6klcqopdawxea82fbE4frI+grRFhrZMi7pVkb1alL9dlsBkm8NoncRt
ocZ0pcl8qsyWBAOZAACcCASIIBmdNiegDge3PB6mPiqBZzODaDSKbjaOcTiUdjuXeDyaez26QiG/
TCaAeWihclPATifBUCjIXy/QbzfWej3Yfj+KgWWjgkGui0WxjUa0gVi3kkm6lEq+mEyjkmuzn2e7
pnLFnU7eikXOpFHRp1PVqlXarlfesVjjlUrmm03poFDtqVTitFrmuFzqu13ywWD7xWL+y2WDg4OX
l5eYmJippZ61rZisrKy0tLS/v7+Crs6FsNCLtNKQt9SWu9aYvNebvtifwdqjw9uox92ryd6yzeG2
0OPCwsLMzMzU1NTA1ufG2ujN3+zT4+7d6fL/7Mbn5+fs7Ozl7vXp8fbu9Pj09PTy9/r1+Pv+/v7M
zMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAADn4rtgAAAAnnRSTlP/////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////AD6H4/gAAAABYktHRP+lB/LFAAAACXBIWXMAAABIAAAASABGyWs+AAADSUlEQVRI
x+2WaU8TURSGzyCLQEUxiFYtCEo8Da3sYglQbDUaluISV6pYFdsyop1Or8ElSgg2RSjgArSZ63/1
3JkOXRBZgn7yTXpmyzwz857lFhb3XW9/CsEi317f2c71/OnZ/+C9gSdDKmNySI2GorQNxiaDpFA4
FgrS+WgoxFhwck/gMTjBwmCJ+WCYMQso5SBUoQCcZKwGgClg2QSOt7jp7pnWGQFJ2e0tpFYX5+k3
TUn+QTOsqAV/hRRmJngiYAVrYILAkipT+C34GzqJ+AW7BDiBhga4VgdwIFmdNMBKMcAQI3Ctz1cO
CmPD4hEKVBX5TpdYfg/m7bhC0YHrFHvQtbY2h840fw9Hzh8tO7CaSZ6V3k2AdWXBNdaKosGtwG78
SLED4xSd+I1rbWK37ii5cO58pirCUglYBXhIjVlywWGQoluBl7CT83VE8nUZ28lu3ZUycUlLZ8CV
UrgGnpgeR7JgZrUxHVzh9/tjAuzxbFRFM7nwGbGZ8wF083UHLlPqDuZWxSAZrBSXqmbyGBuBEQNM
0sFCUQJf8QiyAXbRp7uwA5fI7iXei9ifotzlgiMy3R+NqKpMRiv6gUwVzfTAlAiLyUJkxVWPUAYc
R5fWfCGB7jV00GOciJ0an95T5133GDLAKXTMY1/K3j6HPeJ42YEJvrAX8M0M1+y8LvJhnnejURmc
92HvH2aFGtuWa4I/Ido1qgbElH48j235YNkiwbhxc6QKpJN56NiN18bOnQ2uCV5BvCRaEC8aqAS2
rBp76bSRPFutCT4No8chkMu95vG+ynIve3KHUAvO6i04w2d7dCu6Fwxy00LGCpsJrixlQbAVfL/3
5Qb3VN5068M1vQW/UrG5U3EHxrXGH4IrJTfAxluqUMWicCjLva/zvC8Mf72388fmfIeIS61UIU60
o2jFxbKGxsMwzQvfuKScyTREcxz2ZOV9XDCPtY/6ZoB+X/udzl6Rw2RDWfV7ngceonFxXIqMgj83
eXey3Fe7HfRh0bAlondZQJKgXM2rsrsmd2rXK4j6ZHx8PMAmhM/y2CO1oH7vmdx9X0wfZLj7v0q/
8Orcv7D8T039s/8VH7bVu2c718NbJrhuBzq2leo3nTlTX62DfwGZkKiGotSUXQAAAABJRU5ErkJg
gg==

------=_NextPart_000_0000_01CBF56E.AFFD6CA0
Content-Type: text/css;
	charset="koi8-r"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.albahari.com/threading/tstyles.css

BODY {
	LINE-HEIGHT: 1.2; MARGIN: 0px; PADDING-LEFT: 21em; BACKGROUND: white; =
COLOR: black; FONT-SIZE: 90%
}
BODY {
	FONT-FAMILY: verdana, sans serif
}
CODE {
	FONT-FAMILY: verdana, sans serif
}
CODE {
	COLOR: #446; FONT-WEIGHT: bold
}
DIV#main {
	MIN-WIDTH: 41em; PADDING-BOTTOM: 0.5em; PADDING-RIGHT: 3em; MAX-WIDTH: =
58em; PADDING-TOP: 0.5em
}
DIV#navbar {
	POSITION: absolute; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: =
1em; WIDTH: 18em; PADDING-RIGHT: 1em; FONT-FAMILY: arial, sans serif; =
BACKGROUND: white; HEIGHT: 100%; COLOR: black; FONT-SIZE: 95%; OVERFLOW: =
auto; TOP: 0px; PADDING-TOP: 0.5em; LEFT: 0px
}

@media Screen   =20
{
DIV#navbar {
	POSITION: fixed
}
    }
P {
	MARGIN-TOP: 0.7em; MARGIN-BOTTOM: 0.7em
}
LI {
	MARGIN-TOP: 0.7em; MARGIN-BOTTOM: 0.7em
}
UL {
	MARGIN-TOP: 0.5em; MARGIN-BOTTOM: 0.6em
}
DT {
	MARGIN-BOTTOM: 4pt; FONT-WEIGHT: bold
}
DD {
	MARGIN-BOTTOM: 4pt
}
B {
	BACKGROUND-COLOR: #ffa; FONT-WEIGHT: normal
}
PRE {
	FONT-FAMILY: consolas, "courier new", monospace
}
PRE.output {
	FONT-FAMILY: consolas, "courier new", monospace
}
PRE {
	PADDING-BOTTOM: 3pt; MARGIN: 0px; PADDING-LEFT: 4pt; PADDING-RIGHT: =
6pt; PADDING-TOP: 3pt
}
TABLE {
	BORDER-BOTTOM: #666 2px solid; BORDER-LEFT: #666 2px solid; =
BORDER-COLLAPSE: collapse; BORDER-TOP: #666 2px solid; BORDER-RIGHT: =
#666 2px solid
}
TABLE.linqpad {
	BORDER-BOTTOM: #17b 2px solid; BORDER-LEFT: #17b 2px solid; MARGIN: 0px =
1.5em; FONT-SIZE: 90%; BORDER-TOP: #17b 2px solid; BORDER-RIGHT: #17b =
2px solid
}
TH {
	BORDER-BOTTOM: #666 1px solid; TEXT-ALIGN: left; BORDER-LEFT: #666 1px =
solid; PADDING-BOTTOM: 2pt; BACKGROUND-COLOR: #eee; PADDING-LEFT: 3pt; =
PADDING-RIGHT: 3pt; BORDER-TOP: #666 1px solid; BORDER-RIGHT: #666 1px =
solid; PADDING-TOP: 2pt
}
TD {
	BORDER-BOTTOM: #666 1px solid; BORDER-LEFT: #666 1px solid; =
PADDING-BOTTOM: 2pt; BACKGROUND-COLOR: white; PADDING-LEFT: 3pt; =
PADDING-RIGHT: 3pt; BORDER-TOP: #666 1px solid; BORDER-RIGHT: #666 1px =
solid; PADDING-TOP: 2pt
}
TD.typeheader {
	BACKGROUND-COLOR: #17b; FONT-FAMILY: tahoma; COLOR: white; FONT-SIZE: =
90%; FONT-WEIGHT: bold
}
PRE.output {
	BACKGROUND-IMAGE: url(output.png); BORDER-BOTTOM: 1px ridge; =
BORDER-LEFT: 1px ridge; PADDING-BOTTOM: 0.3em; BACKGROUND-COLOR: =
#202020; MARGIN: 0.6em 0px; PADDING-LEFT: 0.5em; PADDING-RIGHT: 0.5em; =
BACKGROUND-REPEAT: repeat-x; BACKGROUND-POSITION: 1px 0px; COLOR: white; =
BORDER-TOP: 1px ridge; BORDER-RIGHT: 1px ridge; PADDING-TOP: 25px
}
DIV.figure {
	TEXT-ALIGN: center; MARGIN: 1.5em 0px
}
P.title {
	TEXT-ALIGN: center; MARGIN-TOP: 2pt; MARGIN-BOTTOM: 0px; FONT-SIZE: =
300%; FONT-WEIGHT: bold
}
P.author {
	TEXT-ALIGN: center; MARGIN-TOP: 2pt; FONT-SIZE: 140%; FONT-WEIGHT: bold
}
P.sectiontitle {
	BORDER-BOTTOM: black 2px solid; TEXT-ALIGN: center; BORDER-LEFT: black =
2px solid; PADDING-BOTTOM: 3pt; TEXT-TRANSFORM: uppercase; MARGIN-TOP: =
1.2em; PADDING-LEFT: 3pt; PADDING-RIGHT: 3pt; MARGIN-BOTTOM: -6pt; =
FONT-SIZE: 180%; BORDER-TOP: black 2px solid; FONT-WEIGHT: bold; =
BORDER-RIGHT: black 2px solid; PADDING-TOP: 3pt
}
A:link {
	COLOR: #0060c0
}
DIV.linqpad {
	BORDER-BOTTOM: #9a3858 4px solid; TEXT-ALIGN: center; BORDER-LEFT: =
#9a3858 4px solid; PADDING-BOTTOM: 2px; MARGIN-TOP: 1em; PADDING-LEFT: =
7px; WIDTH: 284px; PADDING-RIGHT: 7px; MARGIN-BOTTOM: 1em; FLOAT: right; =
MARGIN-LEFT: 1.5em; BORDER-TOP: #9a3858 4px solid; FONT-WEIGHT: bold; =
BORDER-RIGHT: #9a3858 4px solid; PADDING-TOP: 3px
}
DIV.book {
	BORDER-BOTTOM: brown 3px solid; BORDER-LEFT: brown 3px solid; =
PADDING-BOTTOM: 0.5em; BACKGROUND-COLOR: #f9f8dd; MARGIN: 1em 0px 0px =
1.5em; PADDING-LEFT: 1em; WIDTH: 14.5em; PADDING-RIGHT: 0.5em; =
FONT-FAMILY: arial, sans serif; FLOAT: right; BORDER-TOP: brown 3px =
solid; BORDER-RIGHT: brown 3px solid; PADDING-TOP: 1em
}
H1 {
	TEXT-ALIGN: left; FONT-FAMILY: arial, sans-serif; FONT-WEIGHT: bold
}
H2 {
	TEXT-ALIGN: left; FONT-FAMILY: arial, sans-serif; FONT-WEIGHT: bold
}
H3 {
	TEXT-ALIGN: left; FONT-FAMILY: arial, sans-serif; FONT-WEIGHT: bold
}
H1 {
	BORDER-BOTTOM: teal 2pt solid; MARGIN-TOP: 1.5em; MARGIN-BOTTOM: 0.4em; =
COLOR: teal; FONT-SIZE: 220%
}
H2 {
	MARGIN-TOP: 1em; MARGIN-BOTTOM: -0.2em; COLOR: teal; FONT-SIZE: 145%
}
H3 {
	FONT-STYLE: italic; MARGIN-TOP: 1em; MARGIN-BOTTOM: -0.2em; COLOR: #333
}
P.note {
	BACKGROUND-IMAGE: url(pawprints.png); BORDER-BOTTOM-STYLE: solid; =
PADDING-BOTTOM: 16px; BORDER-RIGHT-STYLE: solid; MARGIN: 0.8em 1.5em =
0.6em; PADDING-LEFT: 80px; PADDING-RIGHT: 1em; BACKGROUND-REPEAT: =
no-repeat; BACKGROUND-POSITION: 7px 20%; BORDER-TOP-STYLE: solid; =
BORDER-LEFT-STYLE: solid; OVERFLOW: hidden; PADDING-TOP: 16px
}
P.warning {
	BACKGROUND-IMAGE: url(pawprints.png); BORDER-BOTTOM-STYLE: solid; =
PADDING-BOTTOM: 16px; BORDER-RIGHT-STYLE: solid; MARGIN: 0.8em 1.5em =
0.6em; PADDING-LEFT: 80px; PADDING-RIGHT: 1em; BACKGROUND-REPEAT: =
no-repeat; BACKGROUND-POSITION: 7px 20%; BORDER-TOP-STYLE: solid; =
BORDER-LEFT-STYLE: solid; OVERFLOW: hidden; PADDING-TOP: 16px
}
DIV.note {
	BACKGROUND-IMAGE: url(pawprints.png); BORDER-BOTTOM-STYLE: solid; =
PADDING-BOTTOM: 16px; BORDER-RIGHT-STYLE: solid; MARGIN: 0.8em 1.5em =
0.6em; PADDING-LEFT: 80px; PADDING-RIGHT: 1em; BACKGROUND-REPEAT: =
no-repeat; BACKGROUND-POSITION: 7px 20%; BORDER-TOP-STYLE: solid; =
BORDER-LEFT-STYLE: solid; OVERFLOW: hidden; PADDING-TOP: 16px
}
DIV.warning {
	BACKGROUND-IMAGE: url(pawprints.png); BORDER-BOTTOM-STYLE: solid; =
PADDING-BOTTOM: 16px; BORDER-RIGHT-STYLE: solid; MARGIN: 0.8em 1.5em =
0.6em; PADDING-LEFT: 80px; PADDING-RIGHT: 1em; BACKGROUND-REPEAT: =
no-repeat; BACKGROUND-POSITION: 7px 20%; BORDER-TOP-STYLE: solid; =
BORDER-LEFT-STYLE: solid; OVERFLOW: hidden; PADDING-TOP: 16px
}
DIV.note {
	PADDING-BOTTOM: 4pt; PADDING-TOP: 0px
}
DIV.warning {
	PADDING-BOTTOM: 4pt; PADDING-TOP: 0px
}
P.note {
	BORDER-BOTTOM-COLOR: teal; BORDER-RIGHT-WIDTH: 3px; BORDER-TOP-COLOR: =
teal; BORDER-TOP-WIDTH: 3px; BORDER-BOTTOM-WIDTH: 3px; =
BORDER-RIGHT-COLOR: teal; BORDER-LEFT-COLOR: teal; BORDER-LEFT-WIDTH: =
3px
}
DIV.note {
	BORDER-BOTTOM-COLOR: teal; BORDER-RIGHT-WIDTH: 3px; BORDER-TOP-COLOR: =
teal; BORDER-TOP-WIDTH: 3px; BORDER-BOTTOM-WIDTH: 3px; =
BORDER-RIGHT-COLOR: teal; BORDER-LEFT-COLOR: teal; BORDER-LEFT-WIDTH: =
3px
}
P.warning {
	BORDER-BOTTOM-COLOR: #b02000; BORDER-RIGHT-WIDTH: 5px; =
BORDER-TOP-COLOR: #b02000; BORDER-TOP-WIDTH: 5px; BORDER-BOTTOM-WIDTH: =
5px; BORDER-RIGHT-COLOR: #b02000; BORDER-LEFT-COLOR: #b02000; =
BORDER-LEFT-WIDTH: 5px
}
DIV.warning {
	BORDER-BOTTOM-COLOR: #b02000; BORDER-RIGHT-WIDTH: 5px; =
BORDER-TOP-COLOR: #b02000; BORDER-TOP-WIDTH: 5px; BORDER-BOTTOM-WIDTH: =
5px; BORDER-RIGHT-COLOR: #b02000; BORDER-LEFT-COLOR: #b02000; =
BORDER-LEFT-WIDTH: 5px
}
DIV.sidebar {
	BORDER-BOTTOM: teal 3px solid; BORDER-LEFT: teal 3px solid; =
PADDING-BOTTOM: 0.7em; BACKGROUND-COLOR: #eff; MARGIN: 1.5em 0px; =
PADDING-LEFT: 1em; PADDING-RIGHT: 1em; BORDER-TOP: teal 3px solid; =
BORDER-RIGHT: teal 3px solid; PADDING-TOP: 1em
}
P.sidebartitle {
	TEXT-ALIGN: center; MARGIN-TOP: 0px; FONT-FAMILY: arial, sans-serif; =
MARGIN-BOTTOM: 0.5em; COLOR: teal; FONT-SIZE: 140%; FONT-WEIGHT: bold
}
SPAN.pseudo {
	FONT-FAMILY: "comic sans ms" , cursive; COLOR: #ff6600
}
A.nutshellref:link {
	COLOR: #c00; FONT-WEIGHT: bold; TEXT-DECORATION: none
}
A.nutshellref:visited {
	COLOR: #c00; FONT-WEIGHT: bold; TEXT-DECORATION: none
}
P.navtitle {
	FONT-STYLE: italic; MARGIN-TOP: 0em; FONT-FAMILY: arial, sans serif; =
MARGIN-BOTTOM: -0.4em; COLOR: #555; FONT-SIZE: 105%; FONT-WEIGHT: bold
}
P.navsectioncontainer {
	BORDER-BOTTOM: #888 1px solid; BORDER-LEFT: #888 1px solid; MARGIN: 7pt =
0px 0px; BORDER-TOP: #888 1px solid; BORDER-RIGHT: #888 1px solid
}
A.nav0:link {
	PADDING-BOTTOM: 2pt; MARGIN: 0px; PADDING-LEFT: 3pt; PADDING-RIGHT: =
3pt; DISPLAY: block; FONT-FAMILY: arial, sans-serif; BACKGROUND: =
#d0d0d0; FONT-WEIGHT: bold; TEXT-DECORATION: none; PADDING-TOP: 2pt
}
A.nav0:visited {
	PADDING-BOTTOM: 2pt; MARGIN: 0px; PADDING-LEFT: 3pt; PADDING-RIGHT: =
3pt; DISPLAY: block; FONT-FAMILY: arial, sans-serif; BACKGROUND: =
#d0d0d0; FONT-WEIGHT: bold; TEXT-DECORATION: none; PADDING-TOP: 2pt
}
A.nav0:active {
	PADDING-BOTTOM: 2pt; MARGIN: 0px; PADDING-LEFT: 3pt; PADDING-RIGHT: =
3pt; DISPLAY: block; FONT-FAMILY: arial, sans-serif; BACKGROUND: =
#d0d0d0; FONT-WEIGHT: bold; TEXT-DECORATION: none; PADDING-TOP: 2pt
}
A.nav0a:link {
	PADDING-BOTTOM: 2pt; MARGIN: 0px; PADDING-LEFT: 3pt; PADDING-RIGHT: =
3pt; DISPLAY: block; FONT-FAMILY: arial, sans-serif; BACKGROUND: =
#d0d0d0; FONT-WEIGHT: bold; TEXT-DECORATION: none; PADDING-TOP: 2pt
}
A.nav0a:visited {
	PADDING-BOTTOM: 2pt; MARGIN: 0px; PADDING-LEFT: 3pt; PADDING-RIGHT: =
3pt; DISPLAY: block; FONT-FAMILY: arial, sans-serif; BACKGROUND: =
#d0d0d0; FONT-WEIGHT: bold; TEXT-DECORATION: none; PADDING-TOP: 2pt
}
A.nav0a:active {
	PADDING-BOTTOM: 2pt; MARGIN: 0px; PADDING-LEFT: 3pt; PADDING-RIGHT: =
3pt; DISPLAY: block; FONT-FAMILY: arial, sans-serif; BACKGROUND: =
#d0d0d0; FONT-WEIGHT: bold; TEXT-DECORATION: none; PADDING-TOP: 2pt
}
A.nav0a:link {
	BACKGROUND: #eaeaa0
}
A.nav0a:visited {
	BACKGROUND: #eaeaa0
}
A.nav0a:active {
	BACKGROUND: #eaeaa0
}
A.nav1:link {
	MARGIN: 0px; DISPLAY: block; FONT-FAMILY: arial, sans-serif; =
BACKGROUND: #eee; TEXT-DECORATION: none
}
A.nav1:visited {
	MARGIN: 0px; DISPLAY: block; FONT-FAMILY: arial, sans-serif; =
BACKGROUND: #eee; TEXT-DECORATION: none
}
A.nav1:active {
	MARGIN: 0px; DISPLAY: block; FONT-FAMILY: arial, sans-serif; =
BACKGROUND: #eee; TEXT-DECORATION: none
}
A.nav2:link {
	MARGIN: 0px; DISPLAY: block; FONT-FAMILY: arial, sans-serif; =
BACKGROUND: #eee; TEXT-DECORATION: none
}
A.nav2:visited {
	MARGIN: 0px; DISPLAY: block; FONT-FAMILY: arial, sans-serif; =
BACKGROUND: #eee; TEXT-DECORATION: none
}
A.nav2:active {
	MARGIN: 0px; DISPLAY: block; FONT-FAMILY: arial, sans-serif; =
BACKGROUND: #eee; TEXT-DECORATION: none
}
A.nav1a:link {
	MARGIN: 0px; DISPLAY: block; FONT-FAMILY: arial, sans-serif; =
BACKGROUND: #eee; TEXT-DECORATION: none
}
A.nav1a:visited {
	MARGIN: 0px; DISPLAY: block; FONT-FAMILY: arial, sans-serif; =
BACKGROUND: #eee; TEXT-DECORATION: none
}
A.nav1a:active {
	MARGIN: 0px; DISPLAY: block; FONT-FAMILY: arial, sans-serif; =
BACKGROUND: #eee; TEXT-DECORATION: none
}
A.nav2a:link {
	MARGIN: 0px; DISPLAY: block; FONT-FAMILY: arial, sans-serif; =
BACKGROUND: #eee; TEXT-DECORATION: none
}
A.nav2a:visited {
	MARGIN: 0px; DISPLAY: block; FONT-FAMILY: arial, sans-serif; =
BACKGROUND: #eee; TEXT-DECORATION: none
}
A.nav2a:active {
	MARGIN: 0px; DISPLAY: block; FONT-FAMILY: arial, sans-serif; =
BACKGROUND: #eee; TEXT-DECORATION: none
}
A.nav1a:link {
	BACKGROUND: #f9f8dd
}
A.nav1a:visited {
	BACKGROUND: #f9f8dd
}
A.nav1a:active {
	BACKGROUND: #f9f8dd
}
A.nav2a:link {
	BACKGROUND: #f9f8dd
}
A.nav2a:visited {
	BACKGROUND: #f9f8dd
}
A.nav2a:active {
	BACKGROUND: #f9f8dd
}
A.nav1:link {
	PADDING-BOTTOM: 0.5pt; PADDING-LEFT: 3pt; PADDING-RIGHT: 3pt; =
FONT-SIZE: 90%; FONT-WEIGHT: bold; PADDING-TOP: 0.5pt
}
A.nav1:visited {
	PADDING-BOTTOM: 0.5pt; PADDING-LEFT: 3pt; PADDING-RIGHT: 3pt; =
FONT-SIZE: 90%; FONT-WEIGHT: bold; PADDING-TOP: 0.5pt
}
A.nav1:active {
	PADDING-BOTTOM: 0.5pt; PADDING-LEFT: 3pt; PADDING-RIGHT: 3pt; =
FONT-SIZE: 90%; FONT-WEIGHT: bold; PADDING-TOP: 0.5pt
}
A.nav1a:link {
	PADDING-BOTTOM: 0.5pt; PADDING-LEFT: 3pt; PADDING-RIGHT: 3pt; =
FONT-SIZE: 90%; FONT-WEIGHT: bold; PADDING-TOP: 0.5pt
}
A.nav1a:visited {
	PADDING-BOTTOM: 0.5pt; PADDING-LEFT: 3pt; PADDING-RIGHT: 3pt; =
FONT-SIZE: 90%; FONT-WEIGHT: bold; PADDING-TOP: 0.5pt
}
A.nav1a:active {
	PADDING-BOTTOM: 0.5pt; PADDING-LEFT: 3pt; PADDING-RIGHT: 3pt; =
FONT-SIZE: 90%; FONT-WEIGHT: bold; PADDING-TOP: 0.5pt
}
A.nav1a:link {
	PADDING-BOTTOM: 1pt; PADDING-LEFT: 3pt; PADDING-RIGHT: 3pt; =
PADDING-TOP: 2pt
}
A.nav1a:visited {
	PADDING-BOTTOM: 1pt; PADDING-LEFT: 3pt; PADDING-RIGHT: 3pt; =
PADDING-TOP: 2pt
}
A.nav1a:active {
	PADDING-BOTTOM: 1pt; PADDING-LEFT: 3pt; PADDING-RIGHT: 3pt; =
PADDING-TOP: 2pt
}
A.nav2:link {
	PADDING-BOTTOM: 1pt; PADDING-LEFT: 15pt; PADDING-RIGHT: 3pt; FONT-SIZE: =
85%; FONT-WEIGHT: normal; PADDING-TOP: 0pt
}
A.nav2:visited {
	PADDING-BOTTOM: 1pt; PADDING-LEFT: 15pt; PADDING-RIGHT: 3pt; FONT-SIZE: =
85%; FONT-WEIGHT: normal; PADDING-TOP: 0pt
}
A.nav2:active {
	PADDING-BOTTOM: 1pt; PADDING-LEFT: 15pt; PADDING-RIGHT: 3pt; FONT-SIZE: =
85%; FONT-WEIGHT: normal; PADDING-TOP: 0pt
}
A.nav2a:link {
	PADDING-BOTTOM: 1pt; PADDING-LEFT: 15pt; PADDING-RIGHT: 3pt; FONT-SIZE: =
85%; FONT-WEIGHT: normal; PADDING-TOP: 0pt
}
A.nav2a:visited {
	PADDING-BOTTOM: 1pt; PADDING-LEFT: 15pt; PADDING-RIGHT: 3pt; FONT-SIZE: =
85%; FONT-WEIGHT: normal; PADDING-TOP: 0pt
}
A.nav2a:active {
	PADDING-BOTTOM: 1pt; PADDING-LEFT: 15pt; PADDING-RIGHT: 3pt; FONT-SIZE: =
85%; FONT-WEIGHT: normal; PADDING-TOP: 0pt
}
TABLE.toc {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; MARGIN-TOP: 6pt; =
BORDER-TOP: medium none; BORDER-RIGHT: medium none
}
TD.toc {
	BORDER-BOTTOM: medium none; TEXT-ALIGN: center; BORDER-LEFT: medium =
none; PADDING-BOTTOM: 5pt; PADDING-LEFT: 8pt; PADDING-RIGHT: 8pt; =
FONT-FAMILY: Arial, Sans-Serif; BACKGROUND: #eee; FONT-SIZE: 110%; =
BORDER-TOP: medium none; FONT-WEIGHT: normal; BORDER-RIGHT: white 3pt =
solid; PADDING-TOP: 5pt
}
TD.tocactive {
	BORDER-BOTTOM: medium none; TEXT-ALIGN: center; BORDER-LEFT: medium =
none; PADDING-BOTTOM: 5pt; PADDING-LEFT: 8pt; PADDING-RIGHT: 8pt; =
FONT-FAMILY: Arial, Sans-Serif; BACKGROUND: #eee; FONT-SIZE: 110%; =
BORDER-TOP: medium none; FONT-WEIGHT: normal; BORDER-RIGHT: white 3pt =
solid; PADDING-TOP: 5pt
}
TH.toc {
	BORDER-BOTTOM: medium none; TEXT-ALIGN: center; BORDER-LEFT: medium =
none; PADDING-BOTTOM: 5pt; PADDING-LEFT: 8pt; PADDING-RIGHT: 8pt; =
FONT-FAMILY: Arial, Sans-Serif; BACKGROUND: #eee; FONT-SIZE: 110%; =
BORDER-TOP: medium none; FONT-WEIGHT: normal; BORDER-RIGHT: white 3pt =
solid; PADDING-TOP: 5pt
}
TH.tocactive {
	BORDER-BOTTOM: medium none; TEXT-ALIGN: center; BORDER-LEFT: medium =
none; PADDING-BOTTOM: 5pt; PADDING-LEFT: 8pt; PADDING-RIGHT: 8pt; =
FONT-FAMILY: Arial, Sans-Serif; BACKGROUND: #eee; FONT-SIZE: 110%; =
BORDER-TOP: medium none; FONT-WEIGHT: normal; BORDER-RIGHT: white 3pt =
solid; PADDING-TOP: 5pt
}
TD.toc {
	BACKGROUND: #eee
}
TD.tocactive {
	TEXT-TRANSFORM: uppercase; BACKGROUND: #f9f8dd; FONT-SIZE: 130%; =
FONT-WEIGHT: bold
}
TH.toc {
	BACKGROUND: #d0d0d0
}
TH.tocactive {
	TEXT-TRANSFORM: uppercase; BACKGROUND: #eaeaa0; FONT-SIZE: 130%; =
FONT-WEIGHT: bold
}
A.toc:link {
	FONT-SIZE: 110%; TEXT-DECORATION: none
}
A.toc:visited {
	FONT-SIZE: 110%; TEXT-DECORATION: none
}
A.toc:active {
	FONT-SIZE: 110%; TEXT-DECORATION: none
}

------=_NextPart_000_0000_01CBF56E.AFFD6CA0
Content-Type: text/css;
	charset="koi8-r"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.albahari.com/threading/print.css

BODY {
	LINE-HEIGHT: 1.2; MARGIN: 1em 1%; PADDING-LEFT: 0pt; FONT-FAMILY: =
"times new roman", serif; BACKGROUND: white; COLOR: black; FONT-SIZE: =
90%
}
DIV#main {
	MIN-WIDTH: 20em; PADDING-BOTTOM: 2em; PADDING-LEFT: 2em; PADDING-RIGHT: =
2em; MAX-WIDTH: 55em; PADDING-TOP: 2em
}
DIV#navbar {
	POSITION: relative; PADDING-BOTTOM: 0.5em; PADDING-LEFT: 0.5em; =
PADDING-RIGHT: 0.5em; FONT-FAMILY: arial, sans serif; BACKGROUND: =
#f0f0f0; FLOAT: none; COLOR: black; FONT-SIZE: 90%; OVERFLOW: hidden; =
TOP: 0px; PADDING-TOP: 0.5em; LEFT: 0px
}
PRE {
	FONT-FAMILY: Consolas, "courier new", monospace; FONT-SIZE: 90%
}
.progout {
	FONT-FAMILY: Consolas, "courier new", monospace; FONT-SIZE: 90%
}
.boilercode {
	FONT-FAMILY: Consolas, "courier new", monospace; FONT-SIZE: 90%
}
.figure {
	MARGIN-LEFT: 0mm
}
.progout {
	BORDER-BOTTOM: ridge; BORDER-LEFT: ridge; PADDING-BOTTOM: 0.3em; =
BACKGROUND-COLOR: white; PADDING-LEFT: 0.5em; PADDING-RIGHT: 0.5em; =
COLOR: black; BORDER-TOP: ridge; BORDER-RIGHT: ridge; PADDING-TOP: 0.3em
}

------=_NextPart_000_0000_01CBF56E.AFFD6CA0
Content-Type: text/css;
	charset="koi8-r"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.albahari.com/threading/sh_style.css

PRE.sh_sourceCode {
	BORDER-BOTTOM: #ccc 1px solid; BORDER-LEFT: #ccc 1px solid; =
BACKGROUND-COLOR: #f5f5f5; FONT-STYLE: normal; COLOR: black; BORDER-TOP: =
#ccc 1px solid; FONT-WEIGHT: normal; BORDER-RIGHT: #ccc 1px solid
}
PRE.sh_sourceCode .sh_keyword {
	COLOR: blue
}
PRE.sh_sourceCode .sh_type {
	COLOR: blue
}
PRE.sh_sourceCode .sh_usertype {
	COLOR: teal
}
PRE.sh_sourceCode .sh_string {
	COLOR: #dc1414
}
PRE.sh_sourceCode .sh_regexp {
	COLOR: orange
}
PRE.sh_sourceCode .sh_specialchar {
	COLOR: pink
}
PRE.sh_sourceCode .sh_comment {
	FONT-STYLE: italic; COLOR: green
}
PRE.sh_sourceCode .sh_number {
	COLOR: purple
}
PRE.sh_sourceCode .sh_preproc {
	COLOR: blue
}
PRE.sh_sourceCode .sh_symbol {
	COLOR: black
}
PRE.sh_sourceCode .sh_function {
	COLOR: black
}
PRE.sh_sourceCode .sh_cbracket {
	COLOR: black
}
PRE.sh_sourceCode .sh_todo {
	BACKGROUND-COLOR: cyan; FONT-WEIGHT: bold
}
PRE.sh_sourceCode .sh_predef_var {
	COLOR: darkblue
}
PRE.sh_sourceCode .sh_predef_func {
	COLOR: darkblue; FONT-WEIGHT: bold
}
PRE.sh_sourceCode .sh_classname {
	COLOR: teal
}
PRE.sh_sourceCode .sh_linenum {
	FONT-FAMILY: monospace; COLOR: black
}
PRE.sh_sourceCode .sh_url {
	FONT-FAMILY: monospace; COLOR: blue; TEXT-DECORATION: underline
}
PRE.sh_sourceCode .sh_date {
	COLOR: blue; FONT-WEIGHT: bold
}
PRE.sh_sourceCode .sh_time {
	COLOR: darkblue; FONT-WEIGHT: bold
}
PRE.sh_sourceCode .sh_file {
	COLOR: darkblue; FONT-WEIGHT: bold
}
PRE.sh_sourceCode .sh_ip {
	COLOR: darkgreen
}
PRE.sh_sourceCode .sh_name {
	COLOR: darkgreen
}
PRE.sh_sourceCode .sh_variable {
	COLOR: darkgreen
}
PRE.sh_sourceCode .sh_italics {
	FONT-STYLE: italic; COLOR: darkgreen
}
PRE.sh_sourceCode .sh_bold {
	COLOR: darkgreen; FONT-WEIGHT: bold
}
PRE.sh_sourceCode .sh_underline {
	COLOR: darkgreen; TEXT-DECORATION: underline
}
PRE.sh_sourceCode .sh_fixed {
	FONT-FAMILY: monospace; COLOR: green
}
PRE.sh_sourceCode .sh_argument {
	COLOR: darkgreen
}
PRE.sh_sourceCode .sh_optionalargument {
	COLOR: purple
}
PRE.sh_sourceCode .sh_math {
	COLOR: orange
}
PRE.sh_sourceCode .sh_bibtex {
	COLOR: blue
}
PRE.sh_sourceCode .sh_oldfile {
	COLOR: orange
}
PRE.sh_sourceCode .sh_newfile {
	COLOR: darkgreen
}
PRE.sh_sourceCode .sh_difflines {
	COLOR: blue
}
PRE.sh_sourceCode .sh_selector {
	COLOR: purple
}
PRE.sh_sourceCode .sh_property {
	COLOR: blue
}
PRE.sh_sourceCode .sh_value {
	FONT-STYLE: italic; COLOR: darkgreen
}
PRE.sh_sourceCode .sh_section {
	COLOR: black; FONT-WEIGHT: bold
}
PRE.sh_sourceCode .sh_paren {
	COLOR: red
}
PRE.sh_sourceCode .sh_attribute {
	COLOR: darkgreen
}

------=_NextPart_000_0000_01CBF56E.AFFD6CA0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.albahari.com/threading/sh_main.min.js

/* Copyright (C) 2007, 2008 gnombat@users.sourceforge.net */=0A=
/* License: http://shjs.sourceforge.net/doc/gplv3.html */=0A=
=0A=
if(!this.sh_languages){this.sh_languages=3D{}}var =
sh_requests=3D{};function =
sh_isEmailAddress(a){if(/^mailto:/.test(a)){return false}return =
a.indexOf("@")!=3D=3D-1}function sh_setHref(b,c,d){var =
a=3Dd.substring(b[c-2].pos,b[c-1].pos);if(a.length>=3D2&&a.charAt(0)=3D=3D=
=3D"<"&&a.charAt(a.length-1)=3D=3D=3D">"){a=3Da.substr(1,a.length-2)}if(s=
h_isEmailAddress(a)){a=3D"mailto:"+a}b[c-2].node.href=3Da}function =
sh_konquerorExec(b){var a=3D[""];a.index=3Db.length;a.input=3Db;return =
a}function =
sh_highlightString(B,o){if(/Konqueror/.test(navigator.userAgent)){if(!o.k=
onquered){for(var F=3D0;F<o.length;F++){for(var =
H=3D0;H<o[F].length;H++){var =
G=3Do[F][H][0];if(G.source=3D=3D=3D"$"){G.exec=3Dsh_konquerorExec}}}o.kon=
quered=3Dtrue}}var N=3Ddocument.createElement("a");var =
q=3Ddocument.createElement("span");var A=3D[];var j=3D0;var n=3D[];var =
C=3D0;var k=3Dnull;var x=3Dfunction(i,a){var =
p=3Di.length;if(p=3D=3D=3D0){return}if(!a){var =
Q=3Dn.length;if(Q!=3D=3D0){var =
r=3Dn[Q-1];if(!r[3]){a=3Dr[1]}}}if(k!=3D=3Da){if(k){A[j++]=3D{pos:C};if(k=
=3D=3D=3D"sh_url"){sh_setHref(A,j,B)}}if(a){var =
P;if(a=3D=3D=3D"sh_url"){P=3DN.cloneNode(false)}else{P=3Dq.cloneNode(fals=
e)}P.className=3Da;A[j++]=3D{node:P,pos:C}}}C+=3Dp;k=3Da};var =
t=3D/\r\n|\r|\n/g;t.lastIndex=3D0;var d=3DB.length;while(C<d){var =
v=3DC;var l;var w;var =
h=3Dt.exec(B);if(h=3D=3D=3Dnull){l=3Dd;w=3Dd}else{l=3Dh.index;w=3Dt.lastI=
ndex}var g=3DB.substring(v,l);var M=3D[];for(;;){var I=3DC-v;var D;var =
y=3Dn.length;if(y=3D=3D=3D0){D=3D0}else{D=3Dn[y-1][2]}var O=3Do[D];var =
z=3DO.length;var m=3DM[D];if(!m){m=3DM[D]=3D[]}var E=3Dnull;var =
u=3D-1;for(var K=3D0;K<z;K++){var =
f;if(K<m.length&&(m[K]=3D=3D=3Dnull||I<=3Dm[K].index)){f=3Dm[K]}else{var =
c=3DO[K][0];c.lastIndex=3DI;f=3Dc.exec(g);m[K]=3Df}if(f!=3D=3Dnull&&(E=3D=
=3D=3Dnull||f.index<E.index)){E=3Df;u=3DK;if(f.index=3D=3D=3DI){break}}}i=
f(E=3D=3D=3Dnull){x(g.substring(I),null);break}else{if(E.index>I){x(g.sub=
string(I,E.index),null)}var e=3DO[u];var J=3De[1];var b;if(J instanceof =
Array){for(var =
L=3D0;L<J.length;L++){b=3DE[L+1];x(b,J[L])}}else{b=3DE[0];x(b,J)}switch(e=
[2]){case -1:break;case -2:n.pop();break;case =
-3:n.length=3D0;break;default:n.push(e);break}}}if(k){A[j++]=3D{pos:C};if=
(k=3D=3D=3D"sh_url"){sh_setHref(A,j,B)}k=3Dnull}C=3Dw}return A}function =
sh_getClasses(d){var a=3D[];var b=3Dd.className;if(b&&b.length>0){var =
e=3Db.split(" ");for(var =
c=3D0;c<e.length;c++){if(e[c].length>0){a.push(e[c])}}}return a}function =
sh_addClass(c,a){var d=3Dsh_getClasses(c);for(var =
b=3D0;b<d.length;b++){if(a.toLowerCase()=3D=3D=3Dd[b].toLowerCase()){retu=
rn}}d.push(a);c.className=3Dd.join(" ")}function =
sh_extractTagsFromNodeList(c,a){var f=3Dc.length;for(var =
d=3D0;d<f;d++){var e=3Dc.item(d);switch(e.nodeType){case =
1:if(e.nodeName.toLowerCase()=3D=3D=3D"br"){var =
b;if(/MSIE/.test(navigator.userAgent)){b=3D"\r"}else{b=3D"\n"}a.text.push=
(b);a.pos++}else{a.tags.push({node:e.cloneNode(false),pos:a.pos});sh_extr=
actTagsFromNodeList(e.childNodes,a);a.tags.push({pos:a.pos})}break;case =
3:case 4:a.text.push(e.data);a.pos+=3De.length;break}}}function =
sh_extractTags(c,b){var =
a=3D{};a.text=3D[];a.tags=3Db;a.pos=3D0;sh_extractTagsFromNodeList(c.chil=
dNodes,a);return a.text.join("")}function sh_mergeTags(d,f){var =
a=3Dd.length;if(a=3D=3D=3D0){return f}var =
c=3Df.length;if(c=3D=3D=3D0){return d}var i=3D[];var e=3D0;var =
b=3D0;while(e<a&&b<c){var h=3Dd[e];var =
g=3Df[b];if(h.pos<=3Dg.pos){i.push(h);e++}else{i.push(g);if(f[b+1].pos<=3D=
h.pos){b++;i.push(f[b]);b++}else{i.push({pos:h.pos});f[b]=3D{node:g.node.=
cloneNode(false),pos:h.pos}}}}while(e<a){i.push(d[e]);e++}while(b<c){i.pu=
sh(f[b]);b++}return i}function sh_insertTags(k,h){var g=3Ddocument;var =
l=3Ddocument.createDocumentFragment();var e=3D0;var d=3Dk.length;var =
b=3D0;var j=3Dh.length;var c=3Dl;while(b<j||e<d){var i;var =
a;if(e<d){i=3Dk[e];a=3Di.pos}else{a=3Dj}if(a<=3Db){if(i.node){var =
f=3Di.node;c.appendChild(f);c=3Df}else{c=3Dc.parentNode}e++}else{c.append=
Child(g.createTextNode(h.substring(b,a)));b=3Da}}return l}function =
sh_highlightElement(d,g){sh_addClass(d,"sh_sourceCode");var c=3D[];var =
e=3Dsh_extractTags(d,c);var f=3Dsh_highlightString(e,g);var =
b=3Dsh_mergeTags(c,f);var =
a=3Dsh_insertTags(b,e);while(d.hasChildNodes()){d.removeChild(d.firstChil=
d)}d.appendChild(a)}function =
sh_getXMLHttpRequest(){if(window.ActiveXObject){return new =
ActiveXObject("Msxml2.XMLHTTP")}else{if(window.XMLHttpRequest){return =
new XMLHttpRequest()}}throw"No XMLHttpRequest implementation =
available"}function sh_load(language,element,prefix,suffix){if(language =
in =
sh_requests){sh_requests[language].push(element);return}sh_requests[langu=
age]=3D[element];var request=3Dsh_getXMLHttpRequest();var =
url=3Dprefix+"sh_"+language+suffix;request.open("GET",url,true);request.o=
nreadystatechange=3Dfunction(){if(request.readyState=3D=3D=3D4){try{if(!r=
equest.status||request.status=3D=3D=3D200){eval(request.responseText);var=
 elements=3Dsh_requests[language];for(var =
i=3D0;i<elements.length;i++){sh_highlightElement(elements[i],sh_languages=
[language])}}else{throw"HTTP error: status =
"+request.status}}finally{request=3Dnull}}};request.send(null)}function =
sh_highlightDocument(g,k){var =
b=3Ddocument.getElementsByTagName("pre");for(var =
e=3D0;e<b.length;e++){var f=3Db.item(e);var a=3Dsh_getClasses(f);for(var =
c=3D0;c<a.length;c++){var =
h=3Da[c].toLowerCase();if(h=3D=3D=3D"sh_sourcecode"){continue}if(h.substr=
(0,3)=3D=3D=3D"sh_"){var d=3Dh.substring(3);if(d in =
sh_languages){sh_highlightElement(f,sh_languages[d])}else{if(typeof(g)=3D=
=3D=3D"string"&&typeof(k)=3D=3D=3D"string"){sh_load(d,f,g,k)}else{throw'F=
ound <pre> element with class=3D"'+h+'", but no such language =
exists'}}break}}}};
------=_NextPart_000_0000_01CBF56E.AFFD6CA0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.albahari.com/threading/sh_csharp.js

if (! this.sh_languages) {=0A=
  this.sh_languages =3D {};=0A=
}=0A=
sh_languages['csharp'] =3D [=0A=
  [=0A=
    [=0A=
      /\b(?:using)\b/g,=0A=
      'sh_preproc',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      =
/\b[+-]?(?:(?:0x[A-Fa-f0-9]+)|(?:(?:[\d]*\.)?[\d]+(?:[eE][+-]?[\d]+)?))(?=
:[FfDdMmUulL]+)?\b/g,=0A=
      'sh_number',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /(\b(?:class|struct|typename))([ \t]+)([A-Za-z0-9_]+)/g,=0A=
      ['sh_keyword', 'sh_normal', 'sh_classname'],=0A=
      -1=0A=
    ],=0A=
    [=0A=
      =
/\b(?:abstract|event|new|struct|as|explicit|null|switch|base|extern|this|=
false|operator|throw|break|finally|out|true|fixed|override|try|case|param=
s|typeof|catch|for|private|foreach|protected|checked|goto|public|unchecke=
d|class|if|readonly|unsafe|const|implicit|ref|continue|in|return|virtual|=
default|interface|sealed|volatile|delegate|internal|do|is|sizeof|while|lo=
ck|stackalloc|else|static|enum|namespace|get|partial|set|value|where|yiel=
d)\b/g,=0A=
      'sh_keyword',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /\/\/\//g,=0A=
      'sh_comment',=0A=
      1=0A=
    ],=0A=
    [=0A=
      /\/\//g,=0A=
      'sh_comment',=0A=
      7=0A=
    ],=0A=
    [=0A=
      /\/\*\*/g,=0A=
      'sh_comment',=0A=
      8=0A=
    ],=0A=
    [=0A=
      /\/\*/g,=0A=
      'sh_comment',=0A=
      9=0A=
    ],=0A=
    [=0A=
      /(\bstruct)([ \t]+)([A-Za-z0-9_]+)/g,=0A=
      ['sh_keyword', 'sh_normal', 'sh_classname'],=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /^[ \t]*#(?:[ \t]*include)/g,=0A=
      'sh_preproc',=0A=
      10,=0A=
      1=0A=
    ],=0A=
    [=0A=
      /^[ \t]*#(?:[ \t]*[A-Za-z0-9_]*)/g,=0A=
      'sh_preproc',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      =
/\b[+-]?(?:(?:0x[A-Fa-f0-9]+)|(?:(?:[\d]*\.)?[\d]+(?:[eE][+-]?[\d]+)?))u?=
(?:(?:int(?:8|16|32|64))|L)?\b/g,=0A=
      'sh_number',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /"/g,=0A=
      'sh_string',=0A=
      13=0A=
    ],=0A=
    [=0A=
      /'/g,=0A=
      'sh_string',=0A=
      14=0A=
    ],=0A=
    [=0A=
      =
/\b(?:bool|byte|sbyte|char|decimal|double|float|int|uint|long|ulong|objec=
t|short|ushort|string|void)\b/g,=0A=
      'sh_type',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /~|!|%|\^|\*|\(|\)|-|\+|=3D|\[|\]|\\|:|;|,|\.|\/|\?|&|<|>|\|/g,=0A=
      'sh_symbol',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /\{|\}/g,=0A=
      'sh_cbracket',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /(?:[A-Za-z]|_)[A-Za-z0-9_]*(?=3D[ \t]*\()/g,=0A=
      'sh_function',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      =
/([A-Za-z](?:[^`~!@#$%&*()_=3D+{}|;:",<.>\/?'\\[\]\^\-\s]|[_])*)((?:<.*>)=
?)(\s+(?=3D[*&]*[A-Za-z][^`~!@#$%&*()_=3D+{}|;:",<.>\/?'\\[\]\^\-\s]*\s*[=
`~!@#$%&*()_=3D+{}|;:",<.>\/?'\\[\]\^\-\[\]]+))/g,=0A=
      ['sh_usertype', 'sh_usertype', 'sh_normal'],=0A=
      -1=0A=
    ]=0A=
  ],=0A=
  [=0A=
    [=0A=
      /$/g,=0A=
      null,=0A=
      -2=0A=
    ],=0A=
    [=0A=
      =
/(?:<?)[A-Za-z0-9_\.\/\-_~]+@[A-Za-z0-9_\.\/\-_~]+(?:>?)|(?:<?)[A-Za-z0-9=
_]+:\/\/[A-Za-z0-9_\.\/\-_~]+(?:>?)/g,=0A=
      'sh_url',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /<\?xml/g,=0A=
      'sh_preproc',=0A=
      2,=0A=
      1=0A=
    ],=0A=
    [=0A=
      /<!DOCTYPE/g,=0A=
      'sh_preproc',=0A=
      4,=0A=
      1=0A=
    ],=0A=
    [=0A=
      /<!--/g,=0A=
      'sh_comment',=0A=
      5=0A=
    ],=0A=
    [=0A=
      /<(?:\/)?[A-Za-z](?:[A-Za-z0-9_:.-]*)(?:\/)?>/g,=0A=
      'sh_keyword',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /<(?:\/)?[A-Za-z](?:[A-Za-z0-9_:.-]*)/g,=0A=
      'sh_keyword',=0A=
      6,=0A=
      1=0A=
    ],=0A=
    [=0A=
      /&(?:[A-Za-z0-9]+);/g,=0A=
      'sh_preproc',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /<(?:\/)?[A-Za-z][A-Za-z0-9]*(?:\/)?>/g,=0A=
      'sh_keyword',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /<(?:\/)?[A-Za-z][A-Za-z0-9]*/g,=0A=
      'sh_keyword',=0A=
      6,=0A=
      1=0A=
    ],=0A=
    [=0A=
      /@[A-Za-z]+/g,=0A=
      'sh_type',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /(?:TODO|FIXME|BUG)(?:[:]?)/g,=0A=
      'sh_todo',=0A=
      -1=0A=
    ]=0A=
  ],=0A=
  [=0A=
    [=0A=
      /\?>/g,=0A=
      'sh_preproc',=0A=
      -2=0A=
    ],=0A=
    [=0A=
      /([^=3D" \t>]+)([ \t]*)(=3D?)/g,=0A=
      ['sh_type', 'sh_normal', 'sh_symbol'],=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /"/g,=0A=
      'sh_string',=0A=
      3=0A=
    ]=0A=
  ],=0A=
  [=0A=
    [=0A=
      /\\(?:\\|")/g,=0A=
      null,=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /"/g,=0A=
      'sh_string',=0A=
      -2=0A=
    ]=0A=
  ],=0A=
  [=0A=
    [=0A=
      />/g,=0A=
      'sh_preproc',=0A=
      -2=0A=
    ],=0A=
    [=0A=
      /([^=3D" \t>]+)([ \t]*)(=3D?)/g,=0A=
      ['sh_type', 'sh_normal', 'sh_symbol'],=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /"/g,=0A=
      'sh_string',=0A=
      3=0A=
    ]=0A=
  ],=0A=
  [=0A=
    [=0A=
      /-->/g,=0A=
      'sh_comment',=0A=
      -2=0A=
    ],=0A=
    [=0A=
      /<!--/g,=0A=
      'sh_comment',=0A=
      5=0A=
    ]=0A=
  ],=0A=
  [=0A=
    [=0A=
      /(?:\/)?>/g,=0A=
      'sh_keyword',=0A=
      -2=0A=
    ],=0A=
    [=0A=
      /([^=3D" \t>]+)([ \t]*)(=3D?)/g,=0A=
      ['sh_type', 'sh_normal', 'sh_symbol'],=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /"/g,=0A=
      'sh_string',=0A=
      3=0A=
    ]=0A=
  ],=0A=
  [=0A=
    [=0A=
      /$/g,=0A=
      null,=0A=
      -2=0A=
    ]=0A=
  ],=0A=
  [=0A=
    [=0A=
      /\*\//g,=0A=
      'sh_comment',=0A=
      -2=0A=
    ],=0A=
    [=0A=
      =
/(?:<?)[A-Za-z0-9_\.\/\-_~]+@[A-Za-z0-9_\.\/\-_~]+(?:>?)|(?:<?)[A-Za-z0-9=
_]+:\/\/[A-Za-z0-9_\.\/\-_~]+(?:>?)/g,=0A=
      'sh_url',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /<\?xml/g,=0A=
      'sh_preproc',=0A=
      2,=0A=
      1=0A=
    ],=0A=
    [=0A=
      /<!DOCTYPE/g,=0A=
      'sh_preproc',=0A=
      4,=0A=
      1=0A=
    ],=0A=
    [=0A=
      /<!--/g,=0A=
      'sh_comment',=0A=
      5=0A=
    ],=0A=
    [=0A=
      /<(?:\/)?[A-Za-z](?:[A-Za-z0-9_:.-]*)(?:\/)?>/g,=0A=
      'sh_keyword',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /<(?:\/)?[A-Za-z](?:[A-Za-z0-9_:.-]*)/g,=0A=
      'sh_keyword',=0A=
      6,=0A=
      1=0A=
    ],=0A=
    [=0A=
      /&(?:[A-Za-z0-9]+);/g,=0A=
      'sh_preproc',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /<(?:\/)?[A-Za-z][A-Za-z0-9]*(?:\/)?>/g,=0A=
      'sh_keyword',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /<(?:\/)?[A-Za-z][A-Za-z0-9]*/g,=0A=
      'sh_keyword',=0A=
      6,=0A=
      1=0A=
    ],=0A=
    [=0A=
      /@[A-Za-z]+/g,=0A=
      'sh_type',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /(?:TODO|FIXME|BUG)(?:[:]?)/g,=0A=
      'sh_todo',=0A=
      -1=0A=
    ]=0A=
  ],=0A=
  [=0A=
    [=0A=
      /\*\//g,=0A=
      'sh_comment',=0A=
      -2=0A=
    ],=0A=
    [=0A=
      =
/(?:<?)[A-Za-z0-9_\.\/\-_~]+@[A-Za-z0-9_\.\/\-_~]+(?:>?)|(?:<?)[A-Za-z0-9=
_]+:\/\/[A-Za-z0-9_\.\/\-_~]+(?:>?)/g,=0A=
      'sh_url',=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /(?:TODO|FIXME|BUG)(?:[:]?)/g,=0A=
      'sh_todo',=0A=
      -1=0A=
    ]=0A=
  ],=0A=
  [=0A=
    [=0A=
      /$/g,=0A=
      null,=0A=
      -2=0A=
    ],=0A=
    [=0A=
      /</g,=0A=
      'sh_string',=0A=
      11=0A=
    ],=0A=
    [=0A=
      /"/g,=0A=
      'sh_string',=0A=
      12=0A=
    ],=0A=
    [=0A=
      /\/\/\//g,=0A=
      'sh_comment',=0A=
      1=0A=
    ],=0A=
    [=0A=
      /\/\//g,=0A=
      'sh_comment',=0A=
      7=0A=
    ],=0A=
    [=0A=
      /\/\*\*/g,=0A=
      'sh_comment',=0A=
      8=0A=
    ],=0A=
    [=0A=
      /\/\*/g,=0A=
      'sh_comment',=0A=
      9=0A=
    ]=0A=
  ],=0A=
  [=0A=
    [=0A=
      /$/g,=0A=
      null,=0A=
      -2=0A=
    ],=0A=
    [=0A=
      />/g,=0A=
      'sh_string',=0A=
      -2=0A=
    ]=0A=
  ],=0A=
  [=0A=
    [=0A=
      /$/g,=0A=
      null,=0A=
      -2=0A=
    ],=0A=
    [=0A=
      /\\(?:\\|")/g,=0A=
      null,=0A=
      -1=0A=
    ],=0A=
    [=0A=
      /"/g,=0A=
      'sh_string',=0A=
      -2=0A=
    ]=0A=
  ],=0A=
  [=0A=
    [=0A=
      /"/g,=0A=
      'sh_string',=0A=
      -2=0A=
    ],=0A=
    [=0A=
      /\\./g,=0A=
      'sh_specialchar',=0A=
      -1=0A=
    ]=0A=
  ],=0A=
  [=0A=
    [=0A=
      /'/g,=0A=
      'sh_string',=0A=
      -2=0A=
    ],=0A=
    [=0A=
      /\\./g,=0A=
      'sh_specialchar',=0A=
      -1=0A=
    ]=0A=
  ]=0A=
];=0A=

------=_NextPart_000_0000_01CBF56E.AFFD6CA0--
