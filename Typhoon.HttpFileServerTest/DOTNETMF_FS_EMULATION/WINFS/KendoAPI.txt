----------- Widget initialization ----------------------------------------------------------------------------------------------------------------------

// init with JS:
<p>Country: <input id="countriesAutoComplete" class="k-input" /></p>

var countries = [ "Australia", "Canada", "United States of America" ];
$(function() {
    $("#countriesAutoComplete").kendoAutoComplete(countries);
});

or

var countriesDataSource = new kendo.data.DataSource({ data: countries });
$(function() {
    $("#countriesAutoComplete").kendoAutoComplete({ dataSource: countriesDataSource });
});


// init with HTML:
<p>
    Country: 
    <input id="countriesAutoComplete" class="k-input" data-role="autocomplete" data-source="countries" />
</p>
window.countries = [ "Australia", "Canada", "United States of America" ];
$(function() {
     kendo.init($("#countriesAutoComplete"));
});

----------- Widget interaction ----------------------------------------------------------------------------------------------------------------------

// Explicit Event Binding:
<div id="events"></div>
<div id="calendar"></div>

$("#calendar").kendoCalendar({
    change: onChange,
    navigate: onNavigate
});
function onChange() {
    $('#events').text("Change :: " + kendo.toString(this.value(), 'd'));
}
function onNavigate() {
    $('#events').text("Navigate");
}

// Declarative Event Binding:
<div id="events"></div>
<div id="calendar" data-role="calendar" data-change="onChange" data-navigate="onNavigate" />

window.onChange = function onChange() {
    $('#events').text("Change :: " + kendo.toString(this.value(), 'd'));
}
window.onNavigate = function onNavigate() {
    $('#events').text("Navigate");
}
kendo.init($("#calendar"));

----------- Widget Theming ----------------------------------------------------------------------------------------------------------------------

<div id="grid">

var movies = [
    { Title: "Star Wars: A New Hope", Year: 1977 },
    { Title: "Star Wars: The Empire Strikes Back", Year: 1980 },
    { Title: "Star Wars: Return of the Jedi", Year: 1983 }
];
$("#grid").kendoGrid({
    dataSource: new kendo.data.DataSource({
        data: movies
    })
});

#grid {
    text-align: left;
}
.k-widget {
    background-color: #ff0000; /* red */
}

----------- Kendo Templates ----------------------------------------------------------------------------------------------------------------------

// Inline Templates:
<div id='main'></div>
var template = kendo.template("<input type='text' class='k-input' placeholder='Your Name' />");
$('#main').append(template);

// Template Data:
<div id='main'></div>
var template = kendo.template("<input type='text' class='k-input' id='box' value='#= firstName #' />");
var data = { firstName: "Brandon" };
$('#main').append(template(data));

// External Templates:
<div id='main'></div>
<script id="jsTmpl" type="text/x-kendo-template">
  <h4>Awesome Dudes</h4>
  <ul>
    # for (var i = 0, len = data.length; i < len; i++) { #
    <li>#= data[i] #</li>
    # } #
  <ul>
</script>

var template = kendo.template($('#jsTmpl').html());
var data = ["Brandon", "Todd", "John", "Burke"];
var processed = template(data);
$("#main").append(processed);

----------- MVVM ----------------------------------------------------------------------------------------------------------------------

// view-model:
var viewModel = kendo.observable({
    name: "John Doe",
    displayGreeting: function() {
        var name = this.get("name");
        alert("Hello, " + name + "!!!");
    }
});

// View declaration:
<div id="view">
    <input data-bind="value: name" />
    <button data-bind="click: displayGreeting">Display Greeting</button>
</div>

// Binding the View to the View-Model:
kendo.bind($("#view"), viewModel);
kendo.bind($("#view"), viewModel, kendo.mobile.ui); // mobile



















----------- Linear gauge ----------------------------------------------------------------------------------------------------------------------

<div id="main">
    <div id="linGauge"></div>
</div>

// set gauge values at design time:
var gaugeConfig = {
  pointer: {
    value: 68
  },
  scale: {
    min: 10,
    max: 100,
    vertical: false
  }
};
$('#linGauge').kendoLinearGauge(gaugeConfig);


// set gauge values at runtime:
var gauge = $('#linGauge').kendoLinearGauge().data('kendoLinearGauge');
gauge.value(20);

----------- Radial gauge ----------------------------------------------------------------------------------------------------------------------

<div id="radGauge"></div>

var gaugeConfig = {
  theme: "blueopal",
  pointer: {
    value: 20
  },
  scale: {
    startAngle: 30,
    endAngle: 180,
    labels: {
      font: "10px Georgia, Helvetical, sans-serif",
      template: "#=value# RPM"
    },
    ranges: [
        {
          from: 0,
          to: 70,
          color: "#00ab00" //green
        },
		{
          from: 70,
          to: 90,
          color: "#d3ce37" //yellow
        },
		{
         from: 90,
          to: 100,
          color: "#ae130f" //red
        }
      ],
	  max: 500,
	  majorUnit: 50
  }
};
$('#radGauge').kendoRadialGauge(gaugeConfig);

//var gauge = $('#radGauge').kendoRadialGauge().data('kendoRadialGauge');
//gauge.value(80);


// populate from slider:
<div id="main">
    <div id="radGauge"></div>
    <input type="range" id="slider" min=0 max=500 step=5 />
</div>

var radGauge = $('#radGauge').kendoRadialGauge({
  scale: {
    max: 500,
    majorUnit: 60
  }
}).data('kendoRadialGauge');

var slider = $('#slider').kendoSlider().data('kendoSlider');

slider.bind('change', function(e) {
    radGauge.value(e.value);
});
radGauge.value(slider.value());


----------- Mobile / Application and Views ----------------------------------------------------------------------------------------------------------------------

<div id="home"     data-role="view" data-title="Home"     data-layout="main-layout">Home</div>
<div id="settings" data-role="view" data-title="Settings" data-layout="main-layout">Settings</div>

<div id="layout" data-role="layout" data-id="main-layout">
    <div data-role="header">
        <div data-role="navbar">
            <span data-role="view-title"></span>
        </div>
    </div>
    <div data-role="footer">
    	<div data-role="tabstrip">
        	<a data-icon="home" href="#home">Home</a>
        	<a data-icon="settings" href="#settings">Settings</a>
        </div>
    </div>
</div>

//var app = new kendo.mobile.Application(document.body, { transition: "slide" });
var app = new kendo.mobile.Application(document.body, { transition: "zoom" });
//var app = new kendo.mobile.Application(document.body, { transition: "fade" });


---------------

<div data-role="view">
    <ul data-role="listview" data-style="inset" data-source="drinks" data-template="drinks-template"></ul>
    <div data-role="header">
        <div data-role="navbar">ListView Example</div>
    </div>
</div>

<script type="text/x-kendo-tmpl" id="drinks-template">
    <a>
        <img src="images/drink.png" />
        <h2>#: data #</h2>
    </a>
</script>

window.drinks = [ "Coffee", "Tea", "Milk", "Orange Juice", "Water", "Soda", "Lemonade", "Sweet Tea", "Espresso", "Hot Chocolate", "Beer", "Wine" ];
var app = new kendo.mobile.Application(document.body);
















[
    { "Type": "Locomotive", "Model": "Branchline 36-553" },
    { "Type": "Locomotive", "Model": "NMRA Standard" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Lenz Silver mini+ 10310-01" },
    { "Type": "Locomotive", "Model": "Branchline 36-558" },
    { "Type": "Locomotive", "Model": "Branchline 36-554" }
]


USB Host Module - H
Ethernet ENC28 Module - S
WiFi RS21 Module - S
USB Client DP Module - D
(micro)SD Card Module - F
Display Module - R, G, B, I
Relay Module - Y


FEZ Hydra Mainboard
•Sockets: 14
X, Y, A, D, F, I, K, P, S, T, U, R, G, B, Z (-C, -H, +K)
•3 General Purpose X Sockets
•7 General Purpose Y Sockets

•240Mhz (running at 200Mhz) AT91SAM9RL64 ARM9 Processor (http://www.atmel.com/devices/SAM9RL64.aspx)
•16MB SDRAM
•4MB FLASH
•Rich .NETMF open-source Software & Hardware
◦Complete Graphics support 
◦TFT display interface (R/G/B sockets) with Touch screen
◦FAT16/FAT32
◦Full TCP/IP stack with SSL, HTTP, TCP, UDP, DHCP
◦USB Device
◦4-bit SD card with no limit on SD card size
◦Analog
◦PWM
◦I2C
◦SPI
◦UART


Argon R1 - Argon R1
•Sockets: 14
X, Y, A, C, D, F, H, I, P, S, T, U, R, G, B, Z
•5 General Purpose X Sockets
•7 General Purpose Y Sockets

•Processor: 120Mhz ARM7 LPC1788 Cortex-M3 (http://www.nxp.com/products/microcontrollers/cortex_m3/lpc1700/LPC1788FET208.html)
•RAM: 32MB
•FLASH: 128MB

•.NET Gadgeteer v4.2
•USB Device
•USB Host
•3 Serial Ports
•3 PWM Outputs
•4 Analog Inputs
•Touch Screen Interface
•LCD Interface
•SD Card
•SPI
•3 I2C Sockets
•CAN
•I2S (High Quality Audio Interface)

http://www.youtube.com/watch?v=NKJqy2x5JGY&feature=related